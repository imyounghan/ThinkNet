<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThinkLib</name>
    </assembly>
    <members>
        <member name="T:ThinkLib.Caching.CacheManager">
            <summary>
            缓存管理器
            </summary>
        </member>
        <member name="F:ThinkLib.Caching.CacheManager.CacheRegion">
            <summary>
            默认的缓存区
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.CacheManager.GetCache(System.String)">
            <summary>
            获取区域缓存
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.CacheManager.SetCacheProvider(System.Func{ThinkLib.Caching.ICacheProvider})">
            <summary>
            设置缓存
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.CacheManager.SetCacheProvider(System.Func{ThinkLib.Caching.ICacheProvider},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            设置缓存
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.CacheManager.#ctor(ThinkLib.Caching.ICacheProvider)">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.CacheManager.#ctor(ThinkLib.Caching.ICacheProvider,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="P:ThinkLib.Caching.CacheManager.Current">
            <summary>
            single instance
            </summary>
        </member>
        <member name="T:ThinkLib.Caching.ICache">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.ICache.Get(System.String)">
            <summary>
            从缓存获取对象实例。
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.ICache.Put(System.String,System.Object)">
            <summary>
            放此对象实例放入缓存。
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.ICache.Remove(System.String)">
            <summary>
            从缓存移除该键值对应的对象实例。
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.ICache.Clear">
            <summary>
            清空缓存。
            </summary>
        </member>
        <member name="P:ThinkLib.Caching.ICache.RegionName">
            <summary>
            获取此缓存的区域名称。
            </summary>
        </member>
        <member name="T:ThinkLib.Caching.HashtableCacheProvider">
            <summary>
            .Net Hashtable
            </summary>
        </member>
        <member name="T:ThinkLib.Caching.ICacheProvider">
            <summary>
            缓存提供
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.ICacheProvider.BuildCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            建造缓存区。
            </summary>
            <param name="regionName">缓存区域的名称</param>
            <param name="properties">配置项</param>
        </member>
        <member name="M:ThinkLib.Caching.HashtableCacheProvider.BuildCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建区域缓存
            </summary>
        </member>
        <member name="T:ThinkLib.Caching.MemoryCacheProvider">
            <summary>
            .Net MemoryCache
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.MemoryCacheProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.MemoryCacheProvider.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.MemoryCacheProvider.BuildCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建区域缓存
            </summary>
        </member>
        <member name="T:ThinkLib.Caching.CacheConfiguration">
            <summary>
            缓存配置
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.CacheConfiguration.#ctor(System.String,System.String,System.String)">
            <summary>
            build a configuration
            </summary>
        </member>
        <member name="P:ThinkLib.Caching.CacheConfiguration.Region">
            <summary>
            区域
            </summary>
        </member>
        <member name="P:ThinkLib.Caching.CacheConfiguration.Properties">
            <summary>
            配置属性
            </summary>
        </member>
        <member name="T:ThinkLib.Caching.WebCacheProvider">
            <summary>
            .Net WebCache
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.WebCacheProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.WebCacheProvider.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.WebCacheProvider.BuildCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建区域缓存
            </summary>
        </member>
        <member name="T:ThinkLib.Caching.CacheConfigurationSectionHandler">
            <summary>
            配置节点的访问
            </summary>
        </member>
        <member name="F:ThinkLib.Caching.CacheConfigurationSectionHandler.SectionName">
            <summary>
            配置节点名称
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.CacheConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            parse the config section
            </summary>
            <returns>an array of CacheConfig objects</returns>
        </member>
        <member name="T:ThinkLib.Common.Bootstrapper">
            <summary>
            引导程序
            </summary>
        </member>
        <member name="F:ThinkLib.Common.Bootstrapper.Current">
            <summary>
            当前配置
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Bootstrapper.LoadAssemblies(System.Reflection.Assembly[])">
            <summary>
            加载程序集
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Bootstrapper.LoadAssemblies">
            <summary>
            扫描bin目录的程序集
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Bootstrapper.Done(System.Action{ThinkLib.Common.Bootstrapper.TypeRegistration})">
            <summary>
            配置完成。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Bootstrapper.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            注册实例
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Bootstrapper.RegisterType(System.Type,ThinkLib.Common.Lifecycle,System.String)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Bootstrapper.RegisterType(System.Type,System.Type,ThinkLib.Common.Lifecycle,System.String)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="T:ThinkLib.Common.Bootstrapper.TypeRegistration">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Bootstrapper.TypeRegistration.#ctor(System.Type,System.Object,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Bootstrapper.TypeRegistration.#ctor(System.Type,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Bootstrapper.TypeRegistration.#ctor(System.Type,System.String,ThinkLib.Common.Lifecycle)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Bootstrapper.TypeRegistration.#ctor(System.Type,System.Type,System.String,ThinkLib.Common.Lifecycle)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Bootstrapper.TypeRegistration.Equals(System.Object)">
            <summary>
            返回一个值，该值指示此实例是否与指定的对象相等。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Bootstrapper.TypeRegistration.GetHashCode">
            <summary>
            返回此实例的哈希代码。
            </summary>
        </member>
        <member name="P:ThinkLib.Common.Bootstrapper.TypeRegistration.Name">
            <summary>
            要注册的名称
            </summary>
        </member>
        <member name="P:ThinkLib.Common.Bootstrapper.TypeRegistration.RegisterType">
            <summary>
            要注册的类型
            </summary>
        </member>
        <member name="P:ThinkLib.Common.Bootstrapper.TypeRegistration.Instance">
            <summary>
            要注册类型的实例
            </summary>
        </member>
        <member name="P:ThinkLib.Common.Bootstrapper.TypeRegistration.ImplementationType">
            <summary>
            要注册类型的实现类型
            </summary>
        </member>
        <member name="P:ThinkLib.Common.Bootstrapper.TypeRegistration.Lifecycle">
            <summary>
            生命周期
            </summary>
        </member>
        <member name="T:ThinkLib.Common.CacheRegionAttribute">
            <summary>
            表示定义缓存区域策略的特性
            </summary>
        </member>
        <member name="M:ThinkLib.Common.CacheRegionAttribute.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkLib.Common.CacheRegionAttribute.CacheRegion">
            <summary>
            区域名称
            </summary>
        </member>
        <member name="T:ThinkLib.Common.CachingAttribute">
            <summary>
            表示由此特性所描述的方法，能够获得框架所提供的缓存功能。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.CachingAttribute.#ctor(ThinkLib.Common.CachingMethod)">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Common.CachingAttribute.#ctor(ThinkLib.Common.CachingMethod,System.String[])">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="P:ThinkLib.Common.CachingAttribute.Method">
            <summary>
            获取或设置缓存方式。
            </summary>
        </member>
        <member name="P:ThinkLib.Common.CachingAttribute.CacheKey">
            <summary>
            缓存标识
            </summary>
        </member>
        <member name="P:ThinkLib.Common.CachingAttribute.RelatedAreas">
            <summary>
            获取与当前缓存方式相关的区域名称。注：此参数仅在缓存方式为Remove时起作用。
            </summary>
        </member>
        <member name="T:ThinkLib.Common.CachingMethod">
            <summary>
            表示用于缓存特性的缓存方式。
            </summary>
        </member>
        <member name="F:ThinkLib.Common.CachingMethod.Get">
            <summary>
            表示需要从缓存中获取对象。如果缓存中不存在所需的对象，系统则会调用实际的方法获取对象，然后将获得的结果添加到缓存中。
            </summary>
        </member>
        <member name="F:ThinkLib.Common.CachingMethod.Put">
            <summary>
            表示需要将对象存入缓存。此方式会调用实际方法以获取对象，然后将获得的结果添加到缓存中，并直接返回方法的调用结果。
            </summary>
        </member>
        <member name="F:ThinkLib.Common.CachingMethod.Remove">
            <summary>
            表示需要将对象从缓存中移除。
            </summary>
        </member>
        <member name="T:ThinkLib.Common.DisposableObject">
            <summary>
            表示派生对象是需要释放资源的
            </summary>
        </member>
        <member name="M:ThinkLib.Common.DisposableObject.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:ThinkLib.Common.DisposableObject.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">表示对象是否应该明确处理</param>
        </member>
        <member name="M:ThinkLib.Common.DisposableObject.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:ThinkLib.Common.DisposableObject.ThrowIfDisposed">
            <summary>
            表示该对象已释放的异常
            </summary>
        </member>
        <member name="T:ThinkLib.Common.Ensure">
            <summary>
            参数约定
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Ensure.NotNull(System.Object,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的值不能是 null。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Ensure.NotEmpty(System.String,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的字符串不能 <see cref="F:System.String.Empty"/> 字符串。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Ensure.NotNullOrEmpty(System.String,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的字符串不能是 null 或 <see cref="F:System.String.Empty"/> 字符串。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Ensure.NotWhiteSpace(System.String,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的字符串不能是空白字符串。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Ensure.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的字符串不能是 null 或 空白字符串。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Ensure.Positive(System.Int32,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的数值必须是正整数。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Ensure.Positive(System.Int64,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的数值必须是正整数。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Ensure.Nonnegative(System.Int64,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的数值不能是负数。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Ensure.Nonnegative(System.Int32,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的数值不能是负数。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Ensure.NotEmptyGuid(System.Guid,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的标识符不能是均为零的标识。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Ensure.Equal(System.Int32,System.Int32,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的变量值 <paramref name="expected" /> 必须与 <paramref name="actual" /> 相等。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Ensure.Equal(System.Int64,System.Int64,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的变量值 <paramref name="expected" /> 必须与 <paramref name="actual" /> 相等。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.Ensure.Equal(System.Boolean,System.Boolean,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的变量值 <paramref name="expected" /> 必须与 <paramref name="actual" /> 相等。
            </summary>
        </member>
        <member name="T:ThinkLib.Common.IInitializer">
            <summary>
            应用程序初始化接口
            </summary>
        </member>
        <member name="M:ThinkLib.Common.IInitializer.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:ThinkLib.Common.IUnitOfWork">
            <summary>
            表示继承该接口的类型是一个工作单元
            </summary>
        </member>
        <member name="M:ThinkLib.Common.IUnitOfWork.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="T:ThinkLib.Common.Lifecycle">
            <summary>
            生命周期类型
            </summary>
        </member>
        <member name="F:ThinkLib.Common.Lifecycle.Transient">
            <summary>
            每次都构造一个新实例
            </summary>
        </member>
        <member name="F:ThinkLib.Common.Lifecycle.Singleton">
            <summary>
            单例
            </summary>
        </member>
        <member name="F:ThinkLib.Common.Lifecycle.PerThread">
            <summary>
            同一个线程
            </summary>
        </member>
        <member name="F:ThinkLib.Common.Lifecycle.PerSession">
            <summary>
            同一个会话
            </summary>
        </member>
        <member name="T:ThinkLib.Common.LifeCycleAttribute">
            <summary>
            表示实例的生命周期的特性(默认为Singleton)
            </summary>
        </member>
        <member name="M:ThinkLib.Common.LifeCycleAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Common.LifeCycleAttribute.#ctor(ThinkLib.Common.Lifecycle)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Common.LifeCycleAttribute.GetLifecycle(System.Type)">
            <summary>
            获取生命周期
            </summary>
        </member>
        <member name="P:ThinkLib.Common.LifeCycleAttribute.Lifetime">
            <summary>
            返回生命周期类型(默认为Singleton)
            </summary>
        </member>
        <member name="T:ThinkLib.Common.RegisterComponentAttribute">
            <summary>
            表示该特性的类会被注册到IOC容器中
            </summary>
        </member>
        <member name="M:ThinkLib.Common.RegisterComponentAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Common.RegisterComponentAttribute.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Common.RegisterComponentAttribute.#ctor(System.Type)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Common.RegisterComponentAttribute.#ctor(System.Type,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Common.RegisterComponentAttribute.GetFinalRegisterName(System.Type)">
            <summary>
            获取最终的注册名称。
            </summary>
        </member>
        <member name="P:ThinkLib.Common.RegisterComponentAttribute.RegisterType">
            <summary>
            要注册的服务类型。
            </summary>
        </member>
        <member name="P:ThinkLib.Common.RegisterComponentAttribute.RegisterName">
            <summary>
            注册的名称
            </summary>
        </member>
        <member name="P:ThinkLib.Common.RegisterComponentAttribute.RegisterTypeName">
            <summary>
            使用类型名称
            </summary>
        </member>
        <member name="T:ThinkLib.Common.RequiredComponentAttribute">
            <summary>
            标记此特性的类型是运行时必须的组件。
            </summary>
        </member>
        <member name="M:ThinkLib.Common.RequiredComponentAttribute.#ctor">
            <summary>
            default constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Common.RequiredComponentAttribute.#ctor(System.Type)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Common.RequiredComponentAttribute.#ctor(System.Type,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Common.RequiredComponentAttribute.GetFinalRegisterName">
            <summary>
            获取最终的注册名称。
            </summary>
        </member>
        <member name="P:ThinkLib.Common.RequiredComponentAttribute.RegisterName">
            <summary>
            注册的名称
            </summary>
        </member>
        <member name="P:ThinkLib.Common.RequiredComponentAttribute.ServiceType">
            <summary>
            要注册的服务类型。
            </summary>
        </member>
        <member name="P:ThinkLib.Common.RequiredComponentAttribute.RegisterTypeName">
            <summary>
            使用类型名称
            </summary>
        </member>
        <member name="P:ThinkLib.Common.RequiredComponentAttribute.CreateInstance">
            <summary>
            是否创建实例。
            </summary>
        </member>
        <member name="P:ThinkLib.Common.RequiredComponentAttribute.ConstructorParameters">
            <summary>
            构造函数的参数。
            </summary>
        </member>
        <member name="T:ThinkLib.Contexts.ContextManager">
            <summary>
            <see cref="T:ThinkLib.Contexts.IContextManager"/> 的抽象实现类
            </summary>
        </member>
        <member name="T:ThinkLib.Contexts.IContextManager">
            <summary>
            实现上下文的管理接口
            </summary>
        </member>
        <member name="P:ThinkLib.Contexts.IContextManager.Id">
            <summary>
            上下文工厂标识
            </summary>
        </member>
        <member name="P:ThinkLib.Contexts.IContextManager.CurrentContext">
            <summary>
            获取当前的上下文
            </summary>
        </member>
        <member name="M:ThinkLib.Contexts.ContextManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Contexts.ContextManager.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkLib.Contexts.ContextManager.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:ThinkLib.Contexts.ContextManager.ContextType">
            <summary>
            上下文类型
            </summary>
        </member>
        <member name="P:ThinkLib.Contexts.ContextManager.CurrentContext">
            <summary>
            获取当前的上下文
            </summary>
        </member>
        <member name="T:ThinkLib.Contexts.CurrentContext">
            <summary>
            <see cref="T:ThinkLib.Contexts.ICurrentContext"/> 的抽象实现。
            </summary>
        </member>
        <member name="T:ThinkLib.Contexts.ICurrentContext">
            <summary>
            当前访问的上下文接口
            </summary>
        </member>
        <member name="M:ThinkLib.Contexts.ICurrentContext.CurrentContext">
            <summary>
            获取当前的上下文
            </summary>
        </member>
        <member name="M:ThinkLib.Contexts.CurrentContext.#ctor(ThinkLib.Contexts.IContextManager)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Contexts.CurrentContext.GetMap">
            <summary>
            Get the dicitonary mapping context manager to its current context.
            </summary>
        </member>
        <member name="M:ThinkLib.Contexts.CurrentContext.SetMap(System.Collections.IDictionary)">
            <summary>
            Set the map mapping context manager to its current context.
            </summary>
        </member>
        <member name="M:ThinkLib.Contexts.CurrentContext.Bind(ThinkLib.Contexts.IContext)">
            <summary>
            Binds the specified context to the current context.
            </summary>
        </member>
        <member name="M:ThinkLib.Contexts.CurrentContext.HasBind(ThinkLib.Contexts.IContextManager)">
            <summary>
            Returns whether there is a context bound to the current context.
            </summary>
        </member>
        <member name="M:ThinkLib.Contexts.CurrentContext.Unbind(ThinkLib.Contexts.IContextManager)">
            <summary>
            Unbinds and returns the current context.
            </summary>
        </member>
        <member name="P:ThinkLib.Contexts.CurrentContext.ContextManager">
            <summary>
            context factory
            </summary>
        </member>
        <member name="P:ThinkLib.Contexts.CurrentContext.Context">
            <summary>
            Gets or sets the currently bound context.
            </summary>
        </member>
        <member name="T:ThinkLib.Contexts.IContext">
            <summary>
            表示继承该接口的是一个上下文
            </summary>
        </member>
        <member name="P:ThinkLib.Contexts.IContext.ContextManager">
            <summary>
            获取当前的Manager
            </summary>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentDictionaryExtensions">
            <summary>
            ConcurrentDictionary的扩展
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionaryExtensions.Remove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            删除存在key的元素
            </summary>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentQueueExtensions">
            <summary>
            ConcurrentQueue 的扩展类
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueueExtensions.Dequeue``1(System.Collections.Concurrent.ConcurrentQueue{``0})">
            <summary>
            移除并返回位于队列开始处的元素。
            </summary>
            <returns>如果成功移除返回队列开始处的元素，否则返回该泛型的默认值。</returns>
        </member>
        <member name="T:System.Data.DataReaderExtentions">
            <summary>
            对 <see cref="T:System.Data.IDataReader"/> 的扩展
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToDictionary(System.Data.IDataReader)">
            <summary>
            转成字典数据
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToDictionary(System.Data.IDataReader,System.Boolean)">
            <summary>
            转成字典数据
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToCollection(System.Data.IDataReader)">
            <summary>
            转成字典数据集合
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToCollection(System.Data.IDataReader,System.Boolean)">
            <summary>
            转成字典数据集合
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToList``1(System.Data.IDataReader)">
            <summary>
            转成实体集合
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToList``1(System.Data.IDataReader,System.Collections.IDictionary)">
            <summary>
            转成实体集合
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToList``1(System.Data.IDataReader,System.Boolean)">
            <summary>
            转成实体集合
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToList``1(System.Data.IDataReader,System.Boolean,System.Collections.IDictionary)">
            <summary>
            转成实体集合
            </summary>
        </member>
        <member name="T:System.Data.DbConnectionExtentions">
            <summary>
            <see cref="T:System.Data.IDbConnection"/> 的扩展类
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.DictionaryExtentions">
            <summary>
            对 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的扩展
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtentions.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            如果指定的键尚不存在，则将键/值对添加到字典中。
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtentions.TryAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            尝试将指定的键和值添加到字典中。
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtentions.TryRemove``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
            <summary>
            尝试从字典中移除并返回具有指定键的值。
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtentions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
            如果指定的键尚不存在，则将键/值对添加到 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中；如果指定的键已存在，则更新 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的键/值对。
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtentions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
            <summary>
            如果指定的键尚不存在，则将键/值对添加到 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中；如果指定的键已存在，则更新 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的键/值对。
            </summary>
        </member>
        <member name="T:System.Collections.Generic.EnumerableExtentions">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/> 的扩展类
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtentions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历结果集
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtentions.Safe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            如果 <param name="source"/> 为null，则创建一个空的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtentions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            检查 <param name="source" /> 是否为空。
            </summary>
        </member>
        <member name="T:System.Collections.EnumerableExtentions">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/> 的扩展类
            </summary>
        </member>
        <member name="M:System.Collections.EnumerableExtentions.MapTo``1(System.Collections.IDictionary)">
            <summary>
            将字典数据映射成对应的模型
            </summary>
        </member>
        <member name="M:System.Collections.EnumerableExtentions.MapTo``1(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            将字典数据映射成对应的模型
            </summary>
        </member>
        <member name="M:System.Collections.EnumerableExtentions.MapTo(System.Collections.IDictionary,System.Type)">
            <summary>
            将字典数据映射成对应的模型
            </summary>
        </member>
        <member name="M:System.Collections.EnumerableExtentions.MapTo(System.Collections.IDictionary,System.Type,System.Collections.IDictionary)">
            <summary>
            将字典数据映射成对应的模型
            </summary>
        </member>
        <member name="M:System.Collections.EnumerableExtentions.MapTo``1(System.Collections.ICollection)">
            <summary>
            将字典集合数据映射成对应的模型
            </summary>
        </member>
        <member name="M:System.Collections.EnumerableExtentions.MapTo``1(System.Collections.ICollection,System.Collections.IDictionary)">
            <summary>
            将字典集合数据映射成对应的模型
            </summary>
        </member>
        <member name="T:System.EventArgs`1">
            <summary>
            包含事件数据的泛型类
            </summary>
        </member>
        <member name="M:System.EventArgs`1.#ctor(`0)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:System.EventArgs`1.Data">
            <summary>
            包含的数据
            </summary>
        </member>
        <member name="T:System.Linq.Expressions.ParameterRebinder">
            <summary>
            Represents the parameter rebinder used for rebinding the parameters for the given expressions. For more information about this solution please refer to http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx.
            </summary>
        </member>
        <member name="T:System.Linq.Expressions.ExpressionFuncExtender">
            <summary>
            Represents the extender for Expression[Func[T, bool]] type. For more information about this solution please refer to http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx.
            </summary>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionFuncExtender.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines two given expressions by using the AND semantics.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="first">The first part of the expression.</param>
            <param name="second">The second part of the expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionFuncExtender.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines two given expressions by using the AND semantics.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="first">The first part of the expression.</param>
            <param name="second">The second part of the expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionFuncExtender.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines two given expressions by using the OR semantics.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="first">The first part of the expression.</param>
            <param name="second">The second part of the expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionFuncExtender.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Represents the specification which indicates the semantics opposite to the given specification.
            </summary>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionFuncExtender.RemoveConvert(System.Linq.Expressions.Expression)">
            <summary></summary>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionFuncExtender.Parameter(System.Linq.Expressions.MemberExpression)">
            <summary></summary>
        </member>
        <member name="T:System.Web.HttpRequestBaseExtensions">
            <summary>
            扩展 <see cref="T:System.Web.HttpRequestBase"/> 类，该类包含客户端在 Web 请求中发送的 HTTP 值。
            </summary>
        </member>
        <member name="M:System.Web.HttpRequestBaseExtensions.IsPost(System.Web.HttpRequestBase)">
            <summary>
            判断当前页面是否接收到了 POST 请求
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <returns>是否接收到了POST请求。</returns>
        </member>
        <member name="M:System.Web.HttpRequestBaseExtensions.IsGet(System.Web.HttpRequestBase)">
            <summary>
            判断当前页面是否接收到了 GET 请求
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <returns>是否接收到了GET请求。</returns>
        </member>
        <member name="M:System.Web.HttpRequestBaseExtensions.GetString(System.Web.HttpRequestBase,System.String)">
            <summary>
            获取 <see cref="P:System.Web.HttpRequestBase.QueryString"/>、<see cref="P:System.Web.HttpRequestBase.Form"/>、<see cref="P:System.Web.HttpRequestBase.ServerVariables"/> 和 <see cref="P:System.Web.HttpRequestBase.Cookies"/> 项的集合中具有指定键的项。
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <param name="name">键值</param>
            <returns>该键值对应的值。</returns>
        </member>
        <member name="M:System.Web.HttpRequestBaseExtensions.GetFormString(System.Web.HttpRequestBase,System.String)">
            <summary>
            获得指定表单参数的值
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <param name="name">表单参数</param>
            <returns>表单参数的值</returns>
        </member>
        <member name="M:System.Web.HttpRequestBaseExtensions.GetQueryString(System.Web.HttpRequestBase,System.String)">
            <summary>
            获得指定Url参数的值
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <param name="name">Url参数</param>
            <returns>Url参数的值</returns>
        </member>
        <member name="M:System.Web.HttpRequestBaseExtensions.GetIP(System.Web.HttpRequestBase)">
            <summary>
            获得当前页面客户端的IP
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <returns>当前页面客户端的IP</returns>
        </member>
        <member name="T:System.ObjectExtentions">
            <summary>
            对 基础类型 的扩展
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.IsNull(System.Object)">
            <summary>
            检查当前对象是否为 null
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.HtmlEncode(System.String)">
            <summary>
            返回 HTML 字符串的编码结果
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.HtmlDecode(System.String)">
            <summary>
            返回 HTML 字符串的解码结果
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.UrlEncode(System.String,System.String)">
            <summary>
            返回 URL 字符串的编码结果
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            返回 URL 字符串的编码结果
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.UrlDecode(System.String,System.String)">
            <summary>
            返回 URL 字符串的解码结果
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            返回 URL 字符串的解码结果
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.Safe(System.String,System.String)">
            <summary>
            如果当前的字符串为空，则返回安全值
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.BeforeContact(System.String,System.String)">
            <summary>
            如果当前的字符串不为空，则返回安全值
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.AfterContact(System.String,System.String)">
            <summary>
            如果当前的字符串不为空，则返回安全值
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.TrueLength(System.String,System.String)">
            <summary>
            返回字符串真实长度, 1个汉字长度为2
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.TrueLength(System.String,System.Text.Encoding)">
            <summary>
            返回字符串真实长度
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.Cutting(System.String,System.Int32,System.String)">
            <summary>
            取指定长度的字符串，超过部分替代
            </summary>
            <param name="str">原字符串</param>
            <param name="len">指定长度</param>
            <param name="tail">用于替换的字符串</param>
        </member>
        <member name="M:System.ObjectExtentions.Split(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.InArray(System.String,System.String[],System.Boolean)">
            <summary>
            判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="str">要查找的字符串</param>
            <param name="array">字符串数组</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
        </member>
        <member name="M:System.ObjectExtentions.InArrayIndexOf(System.String,System.String[],System.Boolean)">
            <summary>
            判断指定字符串在指定字符串数组中的位置
            </summary>
            <param name="str">要查找的字符串</param>
            <param name="array">字符串数组</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
        </member>
        <member name="M:System.ObjectExtentions.InArray(System.String,System.String,System.String,System.Boolean)">
            <summary>
            判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="str">字符串</param>
            <param name="strarray">内部以逗号分割单词的字符串</param>
            <param name="strsplit">分割字符串</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:System.ObjectExtentions.IsNumeric(System.String)">
            <summary>
            判定字符串是不是数值型
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.IsDate(System.String)">
            <summary>
            判断字符串是不是yyyy-mm-dd字符串
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.IsTime(System.String)">
            <summary>
            判断字符串是不是时间格式
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.IsDateTime(System.String)">
            <summary>
            判断字符串是不是日期模式
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.IsDecimal(System.String)">
            <summary>
            判断字符串是不是小数类型
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.IsEmail(System.String)">
            <summary>
            检测是否符合email格式
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.IsIPV4(System.String)">
            <summary>
            判断是否为IPv4地址
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.To``1(System.String,``0)">
            <summary>
            将字符串 <param name="str" /> 转换为 <typeparam name="T" /> 的值。如果转换失败则使用 <param name="default" />
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.TryParse(System.String,System.Type,System.Object@)">
            <summary>
            将字符串 <param name="str" /> 转换为 <param name="targetType" /> 的值。一个指示转换是否成功的返回值 <param name="result" />。
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.InIPArray(System.String,System.String[])">
            <summary>
            返回指定IP是否在指定的IP数组所限定的范围内, IP数组内的IP地址可以使用*表示该IP段任意, 例如192.168.1.*
            </summary>
            <param name="ip">指定的IP地址</param>
            <param name="iparray">IP地址范围</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:System.ObjectExtentions.MapTo``1(System.Object)">
            <summary>
            Create an object from the source object.
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.MapTo``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>Create an object from the source object, assign the properties by the same name.
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.MapTo``2(``0,``1,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>Update the target object by the source object, assign the properties by the same name.
            </summary>
        </member>
        <member name="T:System.Threading.ReaderWriterLockSlimExtensions">
            <summary>
            <see cref="T:System.Threading.ReaderWriterLockSlim"/> 的扩展类
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlimExtensions.AtomRead(System.Threading.ReaderWriterLockSlim,System.Action)">
            <summary>
            An atom read action wrapper.
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlimExtensions.AtomRead(System.Threading.ReaderWriterLockSlim,System.Action{System.Threading.ReaderWriterLockSlim})">
            <summary>
            An atom read action wrapper.
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlimExtensions.AtomRead``1(System.Threading.ReaderWriterLockSlim,System.Func{``0})">
            <summary>
            An atom read func wrapper.
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlimExtensions.AtomRead``1(System.Threading.ReaderWriterLockSlim,System.Func{System.Threading.ReaderWriterLockSlim,``0})">
            <summary>
            An atom read func wrapper.
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlimExtensions.AtomWrite(System.Threading.ReaderWriterLockSlim,System.Action)">
            <summary>
            An atom write action wrapper.
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlimExtensions.AtomWrite``1(System.Threading.ReaderWriterLockSlim,System.Func{``0})">
            <summary>
            An atom write func wrapper.
            </summary>
        </member>
        <member name="T:System.Reflection.ReflectionExtentions">
            <summary>
            <see cref="T:System.Reflection.MemberInfo"/> 的扩展类
            </summary>
        </member>
        <member name="M:System.Reflection.ReflectionExtentions.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Returns the type of the specified member
            </summary>
            <param name="memberInfo">member to get type from</param>
            <returns>Member type</returns>
        </member>
        <member name="M:System.Reflection.ReflectionExtentions.IsStaticMember(System.Reflection.MemberInfo)">
            <summary>
            check the member is static.
            </summary>
            <param name="memberInfo">member to get type from</param>
            <returns>Member type</returns>
        </member>
        <member name="M:System.Reflection.ReflectionExtentions.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets a field/property
            </summary>
            <param name="memberInfo">The memberInfo specifying the object</param>
            <param name="o">The object</param>
        </member>
        <member name="M:System.Reflection.ReflectionExtentions.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets a field/property
            </summary>
            <param name="memberInfo">The memberInfo specifying the object</param>
            <param name="o">The object</param>
            <param name="value">The field/property value to assign</param>
        </member>
        <member name="M:System.Reflection.ReflectionExtentions.GetExposingProperty(System.Reflection.MemberInfo)">
            <summary>
            If memberInfo is a method related to a property, returns the PropertyInfo
            </summary>
        </member>
        <member name="M:System.Reflection.ReflectionExtentions.GetFirstInnerReturnType(System.Reflection.MemberInfo)">
            <summary>
            This function returns the type that is the "return type" of the member.
            If it is a template it returns the first template parameter type.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:System.Reflection.ReflectionExtentions.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            返回<paramref name="provider"/>上定义的<typeparamref name="A"/>特性数组。
            </summary>
            <typeparam name="A">特性类型</typeparam>
            <param name="provider">为支持自定义属性的反映对象提供自定义属性。</param>
            <param name="inherit">当为 true 时，查找继承的自定义属性的层次结构链。</param>
        </member>
        <member name="M:System.Reflection.ReflectionExtentions.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            返回<paramref name="provider"/>上定义的第一个<typeparamref name="A"/>特性。
            </summary>
            <typeparam name="A">特性类型</typeparam>
            <param name="provider">为支持自定义属性的反映对象提供自定义属性。</param>
            <param name="inherit">当为 true 时，查找继承的自定义属性的层次结构链。</param>
        </member>
        <member name="M:System.Reflection.ReflectionExtentions.IsDefined``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            判断<paramref name="provider"/>上是否定义<typeparamref name="TAttribute"/>特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="provider">为支持自定义属性的反映对象提供自定义属性。</param>
            <param name="inherit">当为 true 时，查找继承的自定义属性的层次结构链。</param>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            <see cref="T:System.Type"/> 的扩展类
            </summary>
        </member>
        <member name="M:System.TypeExtensions.CanBeNull(System.Type)">
            <summary>
            Determines if a given type can have a null value
            </summary>
        </member>
        <member name="M:System.TypeExtensions.GetSingleMember(System.Type,System.String)">
            <summary>
            Returns a unique MemberInfo
            </summary>
            <param name="t">The declaring type</param>
            <param name="name">The member name</param>
            <returns>A MemberInfo or null</returns>
        </member>
        <member name="M:System.TypeExtensions.GetSingleMember(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Returns a unique MemberInfo
            </summary>
            <param name="t">The declaring type</param>
            <param name="name">The member name</param>
            <param name="bindingFlags">Binding flags</param>
            <returns>A MemberInfo or null</returns>
        </member>
        <member name="M:System.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines if a Type is specified as nullable
            </summary>
        </member>
        <member name="M:System.TypeExtensions.GetNullableType(System.Type)">
            <summary>
            If the type is nullable, returns the underlying type
            Undefined behavior otherwise (it's user responsibility to check for Nullable first)
            </summary>
        </member>
        <member name="M:System.TypeExtensions.GetDefault(System.Type)">
            <summary>
            Returns default value for provided type
            </summary>
        </member>
        <member name="M:System.TypeExtensions.GetShortName(System.Type)">
            <summary>
            Returns type name without generic specification
            </summary>
        </member>
        <member name="T:ThinkLib.Logging.ILogger">
            <summary>
            写日志接口
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.Debug(System.Object)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.Debug(System.Object,System.Exception)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.DebugFormat(System.String,System.Object[])">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.Info(System.Object)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.Info(System.Object,System.Exception)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.InfoFormat(System.String,System.Object[])">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.Warn(System.Object)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.Warn(System.Object,System.Exception)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.WarnFormat(System.String,System.Object[])">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.Error(System.Object)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.Error(System.Object,System.Exception)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.Fatal(System.Object)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.Fatal(System.Object,System.Exception)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILogger.FatalFormat(System.String,System.Object[])">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="P:ThinkLib.Logging.ILogger.IsDebugEnabled">
            <summary>
            是否启用Debug日志
            </summary>
        </member>
        <member name="P:ThinkLib.Logging.ILogger.IsInfoEnabled">
            <summary>
            是否启用Info日志
            </summary>
        </member>
        <member name="P:ThinkLib.Logging.ILogger.IsWarnEnabled">
            <summary>
            是否启用Warn日志
            </summary>
        </member>
        <member name="P:ThinkLib.Logging.ILogger.IsErrorEnabled">
            <summary>
            是否启用Error日志
            </summary>
        </member>
        <member name="P:ThinkLib.Logging.ILogger.IsFatalEnabled">
            <summary>
            是否启用Fatal日志
            </summary>
        </member>
        <member name="T:ThinkLib.Logging.ILoggerProvider">
            <summary>
            表示继承此接口的是一个日志提供者
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILoggerProvider.Create(System.String)">
            <summary>
            通过名称创建一个日志
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.ILoggerProvider.Create(System.Type)">
            <summary>
            通过类型创建一个日志
            </summary>
        </member>
        <member name="F:ThinkLib.Logging.DefaultLoggerProvider.Instance">
            <summary>
            <see cref="T:ThinkLib.Logging.ILoggerProvider"/> 的一个实例
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.DefaultLoggerProvider.Create(System.String)">
            <summary>
            获取写日志接口。
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.DefaultLoggerProvider.Create(System.Type)">
            <summary>
            获取写日志接口。
            </summary>
        </member>
        <member name="T:ThinkLib.Logging.LoggerExtensions">
            <summary>
            <see cref="T:ThinkLib.Logging.ILogger"/> 的扩展方法类
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.LoggerExtensions.Debug(ThinkLib.Logging.ILogger,System.Exception)">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.LoggerExtensions.Debug(ThinkLib.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.LoggerExtensions.Info(ThinkLib.Logging.ILogger,System.Exception)">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.LoggerExtensions.Info(ThinkLib.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.LoggerExtensions.Warn(ThinkLib.Logging.ILogger,System.Exception)">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.LoggerExtensions.Warn(ThinkLib.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.LoggerExtensions.Error(ThinkLib.Logging.ILogger,System.Exception)">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.LoggerExtensions.Error(ThinkLib.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.LoggerExtensions.Fatal(ThinkLib.Logging.ILogger,System.Exception)">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.LoggerExtensions.Fatal(ThinkLib.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            写日志
            </summary>
        </member>
        <member name="T:ThinkLib.Logging.LogManager">
            <summary>
            日志管理器
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.LogManager.SetLoggerProvider(System.Func{ThinkLib.Logging.ILoggerProvider})">
            <summary>
            设置日志Provider
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.LogManager.GetLogger(System.String)">
            <summary>
            获取logger
            </summary>
        </member>
        <member name="M:ThinkLib.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            获取logger
            </summary>
        </member>
        <member name="T:ThinkLib.Scheduling.Worker`1">
            <summary>
            后台循环执行一个特定的方法的工作器
            </summary>
        </member>
        <member name="T:ThinkLib.Scheduling.Worker">
            <summary>
            后台循环执行一个特定的方法的工作器
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.Worker.#ctor">
            <summary>
            default 
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.Worker.#ctor(System.Action,System.Action,System.Action{System.Exception})">
            <summary>Initialize a new Worker for the specified method to run.
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.Worker.Working">
            <summary>
            表示一个持续工作的方法
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.Worker.SetInterval(System.Int32)">
            <summary>
            等待下一个任务的间隔时间
            </summary>
            <param name="interval">毫秒</param>
        </member>
        <member name="M:ThinkLib.Scheduling.Worker.Start">
            <summary>
            Start the worker.
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.Worker.Stop">
            <summary>
            Stop the worker.
            </summary>
        </member>
        <member name="P:ThinkLib.Scheduling.Worker.Interval">
            <summary>
            间隔时间(毫秒数)
            </summary>
        </member>
        <member name="P:ThinkLib.Scheduling.Worker.Action">
            <summary>
            要执行的函数。
            </summary>
        </member>
        <member name="P:ThinkLib.Scheduling.Worker.SuccessCallback">
            <summary>
            成功调用的函数
            </summary>
        </member>
        <member name="P:ThinkLib.Scheduling.Worker.ExceptionCallback">
            <summary>
            失败调用的函数
            </summary>
        </member>
        <member name="P:ThinkLib.Scheduling.Worker.CancellationToken">
            <summary>
            获取取消操作的通知
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.Worker`1.#ctor(System.Func{`0},System.Action{`0},System.Action{`0},System.Action{`0,System.Exception})">
            <summary>
            default constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.Worker`1.Working">
            <summary>
            表示一个持续工作的方法
            </summary>
        </member>
        <member name="P:ThinkLib.Scheduling.Worker`1.Factory">
            <summary>
            获取该消息的工厂。
            </summary>
        </member>
        <member name="P:ThinkLib.Scheduling.Worker`1.Action">
            <summary>
            要执行的函数。
            </summary>
        </member>
        <member name="P:ThinkLib.Scheduling.Worker`1.SuccessCallback">
            <summary>
            成功调用的函数
            </summary>
        </member>
        <member name="P:ThinkLib.Scheduling.Worker`1.ExceptionCallback">
            <summary>
            失败调用的函数
            </summary>
        </member>
        <member name="T:ThinkLib.Scheduling.LimitedConcurrencyLevelTaskScheduler">
            <summary>表示一个有限的并发任务调度器。
            For more information about this solution please refer to https://github.com/tangxuehua/ecommon
            </summary>
        </member>
        <member name="F:ThinkLib.Scheduling.LimitedConcurrencyLevelTaskScheduler._currentThreadIsProcessingItems">
            <summary>Whether the current thread is processing work items.</summary>
        </member>
        <member name="F:ThinkLib.Scheduling.LimitedConcurrencyLevelTaskScheduler._tasks">
            <summary>The list of tasks to be executed.</summary>
        </member>
        <member name="F:ThinkLib.Scheduling.LimitedConcurrencyLevelTaskScheduler._maxDegreeOfParallelism">
            <summary>The maximum concurrency level allowed by this scheduler.</summary>
        </member>
        <member name="F:ThinkLib.Scheduling.LimitedConcurrencyLevelTaskScheduler._delegatesQueuedOrRunning">
            <summary>Whether the scheduler is currently processing work items.</summary>
        </member>
        <member name="M:ThinkLib.Scheduling.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the LimitedConcurrencyLevelTaskScheduler class with the specified degree of parallelism.
            </summary>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism provided by this scheduler.</param>
        </member>
        <member name="M:ThinkLib.Scheduling.LimitedConcurrencyLevelTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:ThinkLib.Scheduling.LimitedConcurrencyLevelTaskScheduler.NotifyThreadPoolOfPendingWork">
            <summary>
            Informs the ThreadPool that there's work to be executed for this scheduler.
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.LimitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Attempts to execute the specified task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued"></param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="M:ThinkLib.Scheduling.LimitedConcurrencyLevelTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>Attempts to remove a previously scheduled task from the scheduler.</summary>
            <param name="task">The task to be removed.</param>
            <returns>Whether the task could be found and removed.</returns>
        </member>
        <member name="M:ThinkLib.Scheduling.LimitedConcurrencyLevelTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of the tasks currently scheduled on this scheduler.</summary>
            <returns>An enumerable of the tasks currently scheduled.</returns>
        </member>
        <member name="P:ThinkLib.Scheduling.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="T:ThinkLib.Scheduling.WorkerFactory">
            <summary>
            创建后台线程工作器工厂类
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.WorkerFactory.Create(System.Action)">
            <summary>
            创建一个后台线程工作器
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.WorkerFactory.Create(System.Action,System.Action)">
            <summary>
            创建一个后台线程工作器
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.WorkerFactory.Create(System.Action,System.Action{System.Exception})">
            <summary>
            创建一个后台线程工作器
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.WorkerFactory.Create(System.Action,System.Action,System.Action{System.Exception})">
            <summary>
            创建一个后台线程工作器
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.WorkerFactory.Create``1(System.Func{``0},System.Action{``0})">
            <summary>
            创建一个后台线程工作器
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.WorkerFactory.Create``1(System.Func{``0},System.Action{``0},System.Action{``0})">
            <summary>
            创建一个后台线程工作器
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.WorkerFactory.Create``1(System.Func{``0},System.Action{``0},System.Action{``0,System.Exception})">
            <summary>
            创建一个后台线程工作器
            </summary>
        </member>
        <member name="M:ThinkLib.Scheduling.WorkerFactory.Create``1(System.Func{``0},System.Action{``0},System.Action{``0},System.Action{``0,System.Exception})">
            <summary>
            创建一个后台线程工作器
            </summary>
        </member>
        <member name="T:ThinkLib.Serialization.DefaultBinarySerializer">
            <summary>
            <see cref="T:ThinkLib.Serialization.IBinarySerializer"/> 的默认实现。
            </summary>
        </member>
        <member name="T:ThinkLib.Serialization.IBinarySerializer">
            <summary>
            表示一个序列化器。用来序列化对象的字节数组
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.IBinarySerializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            序列化一个对象到 <see cref="T:System.IO.Stream"/>。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.IBinarySerializer.Serialize(System.IO.Stream,System.Object,System.Boolean)">
            <summary>
            序列化一个对象到 <see cref="T:System.IO.Stream"/>。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.IBinarySerializer.Deserialize(System.IO.Stream)">
            <summary>
            反序列化一个对象从一个 <see cref="T:System.IO.Stream"/>。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.IBinarySerializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            反序列化一个对象从一个 <see cref="T:System.IO.Stream"/>。
            </summary>
        </member>
        <member name="F:ThinkLib.Serialization.DefaultBinarySerializer.Instance">
            <summary>
            <see cref="T:ThinkLib.Serialization.IBinarySerializer"/> 的一个实例。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultBinarySerializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            序列化一个对象到 <see cref="T:System.IO.Stream"/>。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultBinarySerializer.Serialize(System.IO.Stream,System.Object,System.Boolean)">
            <summary>
            序列化一个对象到 <see cref="T:System.IO.Stream"/>。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultBinarySerializer.Deserialize(System.IO.Stream)">
            <summary>
            反序列化一个对象从一个 <see cref="T:System.IO.Stream"/>。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultBinarySerializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            反序列化一个对象从一个 <see cref="T:System.IO.Stream"/>。
            </summary>
        </member>
        <member name="T:ThinkLib.Serialization.DefaultTextSerializer">
            <summary>
            <see cref="T:ThinkLib.Serialization.ITextSerializer"/> 的默认实现。
            </summary>
        </member>
        <member name="T:ThinkLib.Serialization.ITextSerializer">
            <summary>
            表示一个序列化器。用来序列化对象的字符串形式
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.ITextSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            序列化一个对象到 <see cref="T:System.IO.TextWriter"/>
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.ITextSerializer.Serialize(System.IO.TextWriter,System.Object,System.Boolean)">
            <summary>
            序列化一个对象到 <see cref="T:System.IO.TextWriter"/>
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.ITextSerializer.Deserialize(System.IO.TextReader)">
            <summary>
            从 <see cref="T:System.IO.TextReader"/> 反序列化一个对象。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.ITextSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            根据 <see cref="T:System.Type"/> 从 <see cref="T:System.IO.TextReader"/> 反序列化一个对象。
            </summary>
        </member>
        <member name="F:ThinkLib.Serialization.DefaultTextSerializer.Instance">
            <summary>
            <see cref="T:ThinkLib.Serialization.ITextSerializer"/> 的一个实例。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultTextSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            序列化一个对象到 <see cref="T:System.IO.TextWriter"/>
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultTextSerializer.Serialize(System.IO.TextWriter,System.Object,System.Boolean)">
            <summary>
            序列化一个对象到 <see cref="T:System.IO.TextWriter"/>
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultTextSerializer.Deserialize(System.IO.TextReader)">
            <summary>
            从 <see cref="T:System.IO.TextReader"/> 反序列化一个对象。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultTextSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            从 <see cref="T:System.IO.TextReader"/> 反序列化一个对象。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultTextSerializer.CustomJavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            将对象序列化成名称/值对的字典
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultTextSerializer.CustomJavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            将所提供的字典转换为指定类型的对象
            </summary>
        </member>
        <member name="P:ThinkLib.Serialization.DefaultTextSerializer.CustomJavaScriptConverter.SupportedTypes">
            <summary>
            返回支持的类型
            </summary>
        </member>
        <member name="T:ThinkLib.Serialization.SerializerExtensions">
            <summary>
            序列化器的扩展。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.SerializerExtensions.Deserialize``1(ThinkLib.Serialization.IBinarySerializer,System.Byte[],System.Boolean)">
            <summary>
            从字节数组反序列化一个对象。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.SerializerExtensions.Serialize(ThinkLib.Serialization.IBinarySerializer,System.Object,System.Boolean)">
            <summary>
            序列化一个对象到字节数组。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.SerializerExtensions.Deserialize``1(ThinkLib.Serialization.ITextSerializer,System.String,System.Boolean)">
            <summary>
            从字符串反序列化一个对象。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.SerializerExtensions.Serialize(ThinkLib.Serialization.ITextSerializer,System.Object,System.Boolean)">
            <summary>
            序列化一个对象到字节串。
            </summary>
        </member>
        <member name="T:ThinkLib.Utilities.CryptoUtil">
            <summary>
            加解密工具类
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtil.EncryptByBase64(System.String,System.String)">
            <summary>
            将字符串编码为Base64字符串
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtil.EncryptByBase64(System.String,System.Text.Encoding)">
            <summary>
            将字符串编码为Base64字符串
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtil.DecryptByBase64(System.String,System.String)">
            <summary>
            将Base64字符串解码为普通字符串
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtil.DecryptByBase64(System.String,System.Text.Encoding)">
            <summary>
            将Base64字符串解码为普通字符串
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtil.EncryptByAES(System.String,System.String,System.String)">
            <summary>
            AES加密字符串
            </summary>
            <param name="source">待加密的字符串</param>
            <param name="key">加密密钥</param>
            <param name="charset">字符集</param>
            <returns>加密成功返回加密后的字符串,失败返加空字符串</returns>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtil.DecryptByAES(System.String,System.String,System.String)">
            <summary>
            AES解密字符串
            </summary>
            <param name="source">待解密的字符串</param>
            <param name="key">解密密钥,和加密密钥相同</param>
            <param name="charset">字符集</param>
            <returns>解密成功返回解密后的字符串,失败返加空字符串</returns>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtil.MD5(System.String,System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="source">原始字符串</param>
            <param name="charset">字符集</param>
            <returns>MD5结果</returns>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtil.EncryptByRSA(System.String,System.String,System.String)">
            <summary>
            RSA加密字符串
            </summary>
            <param name="content">待加密的字符串</param>
            <param name="privateKey">加密密钥</param>
            <param name="charset">字符集</param>
            <returns>解密成功返回解密后的字符串,失败返加空字符串</returns>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtil.VerifyByRSA(System.String,System.String,System.String,System.String)">
            <summary>
            验证签名
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtil.DecryptByRSA(System.String,System.String,System.String)">
            <summary>
            RSA加密字符串
            </summary>
            <param name="content">加密的字符串</param>
            <param name="privateKey">加密密钥</param>
            <param name="charset">字符集</param>
            <returns>加密成功返回加密后的字符串,失败返加空字符串</returns>
        </member>
        <member name="T:ThinkLib.Utilities.FileUtils">
            <summary>
            对文件相关操作的工具类
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.DirectoryExists(System.String)">
            <summary>
            判断目录是否存在
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.FileExists(System.String)">
            <summary>
            判断文件是否存在
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.CreateFile(System.String)">
            <summary>
            创建文件
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.MoveFile(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="sourceFileName">移动文件</param>
            <param name="destFileName">目标文件</param>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            复制文件
            </summary>
            <param name="sourceFileName">复制文件</param>
            <param name="destFileName">目标文件</param>
            <param name="overwrite">若为 true，则允许覆盖现有文件；否则为 false。</param>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.FileSize(System.String)">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.GetMapPath(System.String)">
            <summary>
            获得当前绝对路径
            </summary>
            <param name="strPath">指定的路径</param>
            <returns>绝对路径</returns>
        </member>
        <member name="T:ThinkLib.Utilities.GuidUtil">
            <summary>
            Guid工具
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.GuidUtil.NewSequentialId">
            <summary>
            Creates a sequential GUID according to SQL Server's ordering rules.
            </summary>
        </member>
        <member name="T:ThinkLib.Utilities.HttpUtil">
            <summary>
            http工具类
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.HttpUtil.GetLocalIPV4">
            <summary>
            获取本机IPV4
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.HttpUtil.GetClientIPV4">
            <summary>
            获取客户端ip
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.HttpUtil.BuildRequestWithPost(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            建立请求，以模拟远程HTTP的POST请求方式构造并获取处理结果
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.HttpUtil.BuildRequestWithGet(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            建立请求，以模拟远程HTTP的GET请求方式构造并获取处理结果
            </summary>
        </member>
        <member name="T:ThinkLib.Utilities.LockUtil">
            <summary>
            A class provide the functionality to lock object by value object.
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.LockUtil.Lock(System.Object,System.Action)">
            <summary>Lock an action by a given key value object.
            </summary>
        </member>
        <member name="T:ThinkLib.Utilities.RandomUtil">
            <summary>
            生成随机数工具类
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.RandomUtil.GenerateCode(System.Int32)">
            <summary>
            随机字符串
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.RandomUtil.GenerateNum(System.Int32)">
            <summary>
            随机数字
            </summary>
        </member>
        <member name="T:ThinkLib.Common.TypeConverter">
            <summary>
            Types conversion.
            A "smart" extension to System.Convert (at least that's what we hope)
            </summary>
        </member>
        <member name="M:ThinkLib.Common.TypeConverter.ToNumber(System.Object,System.Type)">
            <summary>
            Convert a value to a number
            </summary>
        </member>
        <member name="M:ThinkLib.Common.TypeConverter.ToEnum(System.Object,System.Type)">
            <summary>
            Converts a value to an enum
            </summary>
        </member>
        <member name="M:ThinkLib.Common.TypeConverter.ToBoolean(System.Object)">
            <summary>
            Converts a value to a boolean
            </summary>
        </member>
        <member name="M:ThinkLib.Common.TypeConverter.ToString(System.Object)">
            <summary>
            Converts a value to a string
            </summary>
        </member>
        <member name="M:ThinkLib.Common.TypeConverter.ToChar(System.Object)">
            <summary>
            Converts a value to a chars
            </summary>
        </member>
        <member name="M:ThinkLib.Common.TypeConverter.ToGuid(System.Object)">
            <summary>
            Converts a value to a guid
            </summary>
        </member>
        <member name="M:ThinkLib.Common.TypeConverter.To(System.Object,System.Type)">
            <summary>
            Converts a value to an object
            </summary>
        </member>
        <member name="M:ThinkLib.Common.TypeConverter.To``1(System.Object)">
            <summary>
            Converts a value to an object type of <typeparam name="T" />
            </summary>
        </member>
    </members>
</doc>
