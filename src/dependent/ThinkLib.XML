<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThinkLib</name>
    </assembly>
    <members>
        <member name="T:ThinkLib.Annotation.CacheRegionAttribute">
            <summary>
            表示定义缓存区域策略的特性
            </summary>
        </member>
        <member name="F:ThinkLib.Annotation.CacheRegionAttribute.DefaultRegionName">
            <summary>
            默认的缓存分区名称
            </summary>
        </member>
        <member name="M:ThinkLib.Annotation.CacheRegionAttribute.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkLib.Annotation.CacheRegionAttribute.CacheRegion">
            <summary>
            区域名称
            </summary>
        </member>
        <member name="T:ThinkLib.Annotation.LifeCycleAttribute">
            <summary>
            表示实例的生命周期的特性(默认为Singleton)
            </summary>
        </member>
        <member name="M:ThinkLib.Annotation.LifeCycleAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Annotation.LifeCycleAttribute.#ctor(ThinkLib.Composition.Lifecycle)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkLib.Annotation.LifeCycleAttribute.Lifetime">
            <summary>
            返回生命周期类型(默认为Singleton)
            </summary>
        </member>
        <member name="M:ThinkLib.Annotation.LifeCycleAttribute.GetLifecycle(System.Type)">
            <summary>
            获取生命周期
            </summary>
        </member>
        <member name="T:ThinkLib.Annotation.RegisterAttribute">
            <summary>
            标记此特性的类型将要注册到容器中。
            </summary>
        </member>
        <member name="M:ThinkLib.Annotation.RegisterAttribute.#ctor">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Annotation.RegisterAttribute.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Annotation.RegisterAttribute.#ctor(System.Type)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Annotation.RegisterAttribute.#ctor(System.String,System.Type)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkLib.Annotation.RegisterAttribute.ContractName">
            <summary>
            注册的名称
            </summary>
        </member>
        <member name="P:ThinkLib.Annotation.RegisterAttribute.ContractType">
            <summary>
            注册的类型
            </summary>
        </member>
        <member name="P:ThinkLib.Annotation.RegisterAttribute.Created">
            <summary>
            是否创建实例。
            </summary>
        </member>
        <member name="P:ThinkLib.Annotation.RegisterAttribute.ConstructorParameters">
            <summary>
            构造函数的参数。
            </summary>
        </member>
        <member name="T:ThinkLib.Annotation.CachingAttribute">
            <summary>
            表示此特性能够获得框架所提供的缓存功能。
            </summary>
        </member>
        <member name="T:ThinkLib.Annotation.CachingAttribute.CachingMethod">
            <summary>
            表示用于缓存特性的缓存方式。
            </summary>
        </member>
        <member name="F:ThinkLib.Annotation.CachingAttribute.CachingMethod.Get">
            <summary>
            表示需要从缓存中获取对象。如果缓存中不存在所需的对象，系统则会调用实际的方法获取对象，然后将获得的结果添加到缓存中。
            </summary>
        </member>
        <member name="F:ThinkLib.Annotation.CachingAttribute.CachingMethod.Put">
            <summary>
            表示需要将对象存入缓存。此方式会调用实际方法以获取对象，然后将获得的结果添加到缓存中，并直接返回方法的调用结果。
            </summary>
        </member>
        <member name="F:ThinkLib.Annotation.CachingAttribute.CachingMethod.Remove">
            <summary>
            表示需要将对象从缓存中移除。
            </summary>
        </member>
        <member name="M:ThinkLib.Annotation.CachingAttribute.#ctor(ThinkLib.Annotation.CachingAttribute.CachingMethod)">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Annotation.CachingAttribute.#ctor(ThinkLib.Annotation.CachingAttribute.CachingMethod,System.String[])">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="P:ThinkLib.Annotation.CachingAttribute.Method">
            <summary>
            获取或设置缓存方式。
            </summary>
        </member>
        <member name="P:ThinkLib.Annotation.CachingAttribute.CacheKey">
            <summary>
            缓存标识
            </summary>
        </member>
        <member name="P:ThinkLib.Annotation.CachingAttribute.RelatedAreas">
            <summary>
            获取与当前缓存方式相关的区域名称。注：此参数仅在缓存方式为Remove时起作用。
            </summary>
        </member>
        <member name="M:ThinkLib.Annotation.CachingAttribute.CreateInterceptor(ThinkLib.Composition.IObjectContainer)">
            <summary>
            创建一个可用于缓存的拦截器
            </summary>
        </member>
        <member name="T:ThinkLib.Annotation.InterceptorAttribute">
            <summary>
            表示拦截器的特性
            </summary>
        </member>
        <member name="P:ThinkLib.Annotation.InterceptorAttribute.AllowMultiple">
            <summary>
            允许多个相同的拦截器
            </summary>
        </member>
        <member name="P:ThinkLib.Annotation.InterceptorAttribute.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:ThinkLib.Annotation.InterceptorAttribute.CreateInterceptor(ThinkLib.Composition.IObjectContainer)">
            <summary>
            创建拦截器
            </summary>
        </member>
        <member name="T:ThinkLib.Bootstrapper">
            <summary>
            引导程序
            </summary>
        </member>
        <member name="M:ThinkLib.Bootstrapper.Component.#ctor(System.Type,System.String,ThinkLib.Composition.Lifecycle)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Bootstrapper.Component.#ctor(System.Type,System.Type,System.String,ThinkLib.Composition.Lifecycle)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkLib.Bootstrapper.Component.ContractName">
            <summary>
            要注册的名称
            </summary>
        </member>
        <member name="P:ThinkLib.Bootstrapper.Component.ContractType">
            <summary>
            要注册的类型
            </summary>
        </member>
        <member name="P:ThinkLib.Bootstrapper.Component.ForType">
            <summary>
            要注册类型的实现类型
            </summary>
        </member>
        <member name="P:ThinkLib.Bootstrapper.Component.Lifecycle">
            <summary>
            生命周期
            </summary>
        </member>
        <member name="M:ThinkLib.Bootstrapper.Component.Equals(System.Object)">
            <summary>
            返回一个值，该值指示此实例是否与指定的对象相等。
            </summary>
        </member>
        <member name="M:ThinkLib.Bootstrapper.Component.GetHashCode">
            <summary>
            返回此实例的哈希代码。
            </summary>
        </member>
        <member name="T:ThinkLib.Bootstrapper.ServerStatus">
            <summary>
            服务状态
            </summary>
        </member>
        <member name="F:ThinkLib.Bootstrapper.ServerStatus.Starting">
            <summary>
            启动中
            </summary>
        </member>
        <member name="F:ThinkLib.Bootstrapper.ServerStatus.Running">
            <summary>
            运行中
            </summary>
        </member>
        <member name="F:ThinkLib.Bootstrapper.ServerStatus.Stopped">
            <summary>
            已停止
            </summary>
        </member>
        <member name="P:ThinkLib.Bootstrapper.AssembliesLoadedEventArgs.Assemblies">
            <summary>
            程序集列表
            </summary>
        </member>
        <member name="P:ThinkLib.Bootstrapper.AssembliesLoadedEventArgs.NonAbstractTypes">
            <summary>
            所有的非抽象类型
            </summary>
        </member>
        <member name="F:ThinkLib.Bootstrapper.Current">
            <summary>
            当前配置
            </summary>
        </member>
        <member name="M:ThinkLib.Bootstrapper.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="E:ThinkLib.Bootstrapper.AssembliesLoaded">
            <summary>
            表示程序集加载完成后的处理方式
            </summary>
        </member>
        <member name="P:ThinkLib.Bootstrapper.Status">
            <summary>
            当前服务器状态
            </summary>
        </member>
        <member name="M:ThinkLib.Bootstrapper.LoadAssemblies(System.Reflection.Assembly[])">
            <summary>
            加载程序集
            </summary>
        </member>
        <member name="M:ThinkLib.Bootstrapper.LoadAssemblies(System.String[])">
            <summary>
            加载程序集
            </summary>
        </member>
        <member name="M:ThinkLib.Bootstrapper.LoadAssemblies">
            <summary>
            扫描bin目录的程序集
            </summary>
        </member>
        <member name="M:ThinkLib.Bootstrapper.Done(ThinkLib.Composition.IObjectContainer)">
            <summary>
            配置完成。
            </summary>
        </member>
        <member name="M:ThinkLib.Bootstrapper.SetDefault(System.Type,System.String,ThinkLib.Composition.Lifecycle)">
            <summary>
            设置组件
            </summary>
        </member>
        <member name="M:ThinkLib.Bootstrapper.SetDefault(System.Type,System.Type,System.String,ThinkLib.Composition.Lifecycle)">
            <summary>
            设置组件
            </summary>
        </member>
        <member name="T:ThinkLib.BootstrapperExtentions">
            <summary>
            <see cref="T:ThinkLib.Bootstrapper"/> 的扩展类
            </summary>
        </member>
        <member name="M:ThinkLib.BootstrapperExtentions.SetDefault(ThinkLib.Bootstrapper,System.Type,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.BootstrapperExtentions.SetDefault(ThinkLib.Bootstrapper,System.Type,System.String)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.BootstrapperExtentions.SetDefault(ThinkLib.Bootstrapper,System.Type)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.BootstrapperExtentions.SetDefault(ThinkLib.Bootstrapper,System.Type,System.Type,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.BootstrapperExtentions.SetDefault(ThinkLib.Bootstrapper,System.Type,System.Type,System.String)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.BootstrapperExtentions.SetDefault(ThinkLib.Bootstrapper,System.Type,System.Type)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.BootstrapperExtentions.SetDefault``1(ThinkLib.Bootstrapper)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.BootstrapperExtentions.SetDefault``1(ThinkLib.Bootstrapper,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.BootstrapperExtentions.SetDefault``1(ThinkLib.Bootstrapper,System.String)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.BootstrapperExtentions.SetDefault``1(ThinkLib.Bootstrapper,System.String,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.BootstrapperExtentions.SetDefault``2(ThinkLib.Bootstrapper)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.BootstrapperExtentions.SetDefault``2(ThinkLib.Bootstrapper,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.BootstrapperExtentions.SetDefault``2(ThinkLib.Bootstrapper,System.String)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.BootstrapperExtentions.SetDefault``2(ThinkLib.Bootstrapper,System.String,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="T:ThinkLib.Composition.IInitializer">
            <summary>
            应用程序初始化接口
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.IInitializer.Initialize(ThinkLib.Composition.IObjectContainer,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:ThinkLib.Composition.Lifecycle">
            <summary>
            生命周期类型
            </summary>
        </member>
        <member name="F:ThinkLib.Composition.Lifecycle.Transient">
            <summary>
            每次都构造一个新实例
            </summary>
        </member>
        <member name="F:ThinkLib.Composition.Lifecycle.Singleton">
            <summary>
            单例
            </summary>
        </member>
        <member name="T:ThinkLib.Composition.IObjectContainer">
            <summary>
            对象容器接口
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.IObjectContainer.IsRegistered(System.Type,System.String)">
            <summary>
            判断此类型是否已注册
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.IObjectContainer.RegisterInstance(System.Type,System.String,System.Object)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.IObjectContainer.RegisterType(System.Type,System.String,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.IObjectContainer.RegisterType(System.Type,System.Type,System.String,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.IObjectContainer.Resolve(System.Type,System.String)">
            <summary>
            获取类型对应的实例
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.IObjectContainer.ResolveAll(System.Type)">
            <summary>
            获取类型所有的实例
            </summary>
        </member>
        <member name="T:ThinkLib.Composition.ObjectContainer">
            <summary>
            <see cref="T:ThinkLib.Composition.IObjectContainer"/>抽象实现类
            </summary>
        </member>
        <member name="P:ThinkLib.Composition.ObjectContainer.Instance">
            <summary>
            single instance
            </summary>
        </member>
        <member name="T:ThinkLib.Composition.ObjectContainer.TypeRegistration">
            <summary>
            类型注册
            </summary>
        </member>
        <member name="P:ThinkLib.Composition.ObjectContainer.TypeRegistration.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:ThinkLib.Composition.ObjectContainer.TypeRegistration.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainer.TypeRegistration.#ctor(System.Type)">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainer.TypeRegistration.#ctor(System.Type,System.String)">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainer.TypeRegistration.Equals(System.Object)">
            <summary>
            判断该实例与当前实例是否相同
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainer.TypeRegistration.GetHashCode">
            <summary>
            获取该实例的哈希代码
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainer.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="P:ThinkLib.Composition.ObjectContainer.RegisteredTypes">
            <summary>
            获取已注册的类型列表
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainer.Resolve(System.Type,System.String)">
            <summary>
            获取类型对应的实例
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainer.ResolveAll(System.Type)">
            <summary>
            获取类型所有的实例
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainer.RegisterInstance(System.Type,System.String,System.Object)">
            <summary>
            注册一个实例
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainer.RegisterType(System.Type,System.String,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainer.RegisterType(System.Type,System.Type,System.String,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainer.IsRegistered(System.Type,System.String)">
            <summary>
            判断此类型是否已注册
            </summary>
        </member>
        <member name="T:ThinkLib.Composition.ObjectContainerExtentions">
            <summary>
            <see cref="T:ThinkLib.Composition.IObjectContainer"/> 扩展方法
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterMultiple(ThinkLib.Composition.IObjectContainer,System.Collections.Generic.IEnumerable{System.Type},System.Object)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterMultiple(ThinkLib.Composition.IObjectContainer,System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterMultiple(ThinkLib.Composition.IObjectContainer,System.Type,System.Collections.Generic.IEnumerable{System.Type},ThinkLib.Composition.Lifecycle)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterMultiple(ThinkLib.Composition.IObjectContainer,System.Collections.Generic.IEnumerable{System.Type},System.Type)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterMultiple(ThinkLib.Composition.IObjectContainer,System.Collections.Generic.IEnumerable{System.Type},System.Type,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterInstance(ThinkLib.Composition.IObjectContainer,System.Type,System.Object)">
            <summary>
            注册一个实例
            </summary>
            <param name="that">容器</param>
            <param name="type">注册类型</param>
            <param name="instance">该类型的实例</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterInstance``1(ThinkLib.Composition.IObjectContainer,``0)">
            <summary>
            注册一个实例
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
            <param name="instance">该类型的实例</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterInstance``1(ThinkLib.Composition.IObjectContainer,System.String,``0)">
            <summary>
            注册一个实例
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
            <param name="name">注册的名称</param>
            <param name="instance">该类型的实例</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterType(ThinkLib.Composition.IObjectContainer,System.Type)">
            <summary>
            注册一个类型且生命周期为单例
            </summary>
            <param name="that">容器</param>
            <param name="type">注册类型</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterType(ThinkLib.Composition.IObjectContainer,System.Type,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册一个类型
            </summary>
            <param name="that">容器</param>
            <param name="type">注册类型</param>
            <param name="lifetime">生命周期</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterType(ThinkLib.Composition.IObjectContainer,System.Type,System.Type)">
            <summary>
            注册一个类型且生命周期为单例
            </summary>
            <param name="that">容器</param>
            <param name="from">注册类型</param>
            <param name="to">目标类型</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterType(ThinkLib.Composition.IObjectContainer,System.Type,System.Type,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册一个类型
            </summary>
            <param name="that">容器</param>
            <param name="from">注册类型</param>
            <param name="to">目标类型</param>
            <param name="lifetime">生命周期</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterType``1(ThinkLib.Composition.IObjectContainer)">
            <summary>
            注册一个类型且生命周期为单例
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterType``1(ThinkLib.Composition.IObjectContainer,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册一个类型
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
            <param name="lifetime">生命周期</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterType``1(ThinkLib.Composition.IObjectContainer,System.String,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册一个类型
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
            <param name="name">注册的名称</param>
            <param name="lifetime">生命周期</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterType``2(ThinkLib.Composition.IObjectContainer)">
            <summary>
            注册一个类型且生命周期为单例
            </summary>
            <typeparam name="TFrom">注册类型</typeparam>
            <typeparam name="TTo">目标类型</typeparam>
            <param name="that">容器</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterType``2(ThinkLib.Composition.IObjectContainer,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册一个类型
            </summary>
            <typeparam name="TFrom">注册类型</typeparam>
            <typeparam name="TTo">目标类型</typeparam>
            <param name="that">容器</param>
            <param name="lifetime">生命周期</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.RegisterType``2(ThinkLib.Composition.IObjectContainer,System.String,ThinkLib.Composition.Lifecycle)">
            <summary>
            注册一个类型
            </summary>
            <typeparam name="TFrom">注册类型</typeparam>
            <typeparam name="TTo">目标类型</typeparam>
            <param name="that">容器</param>
            <param name="name">注册的名称</param>
            <param name="lifetime">生命周期类型</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.IsRegistered(ThinkLib.Composition.IObjectContainer,System.Type)">
            <summary>
            判断此类型是否已注册
            </summary>
            <param name="that">容器</param>
            <param name="type">类型</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.IsRegistered``1(ThinkLib.Composition.IObjectContainer)">
            <summary>
            判断此类型是否已注册
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.IsRegistered``1(ThinkLib.Composition.IObjectContainer,System.String)">
            <summary>
            判断此类型是否已注册
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
            <param name="name">注册的名称</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.Resolve(ThinkLib.Composition.IObjectContainer,System.Type)">
            <summary>
            获取类型对应的实例
            </summary>
            <param name="that">容器</param>
            <param name="type">类型</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.Resolve``1(ThinkLib.Composition.IObjectContainer)">
            <summary>
            获取类型对应的实例
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.Resolve``1(ThinkLib.Composition.IObjectContainer,System.String)">
            <summary>
            获取类型对应的实例
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
            <param name="name">注册的名称</param>
        </member>
        <member name="M:ThinkLib.Composition.ObjectContainerExtentions.ResolveAll``1(ThinkLib.Composition.IObjectContainer)">
            <summary>
            获取类型所有的实例
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
        </member>
        <member name="T:ThinkLib.DisposableObject">
            <summary>
            表示派生对象是需要释放资源的
            </summary>
        </member>
        <member name="M:ThinkLib.DisposableObject.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:ThinkLib.DisposableObject.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">表示对象是否应该明确处理</param>
        </member>
        <member name="M:ThinkLib.DisposableObject.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:ThinkLib.DisposableObject.ThrowIfDisposed">
            <summary>
            表示该对象已释放的异常
            </summary>
        </member>
        <member name="T:ThinkLib.Utilities.UniqueId">
            <summary>Represents an ObjectId
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.#ctor(System.DateTime,System.Int32,System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="timestamp">The timestamp (expressed as a DateTime).</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.#ctor(System.Int32,System.Int32,System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:ThinkLib.Utilities.UniqueId.Empty">
            <summary>
            Gets an instance of ObjectId where the value is empty.
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.op_LessThan(ThinkLib.Utilities.UniqueId,ThinkLib.Utilities.UniqueId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is less than the second ObjectId.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.op_LessThanOrEqual(ThinkLib.Utilities.UniqueId,ThinkLib.Utilities.UniqueId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is less than or equal to the second ObjectId.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.op_Equality(ThinkLib.Utilities.UniqueId,ThinkLib.Utilities.UniqueId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are equal.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.op_Inequality(ThinkLib.Utilities.UniqueId,ThinkLib.Utilities.UniqueId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are not equal.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.op_GreaterThanOrEqual(ThinkLib.Utilities.UniqueId,ThinkLib.Utilities.UniqueId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is greather than or equal to the second ObjectId.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.op_GreaterThan(ThinkLib.Utilities.UniqueId,ThinkLib.Utilities.UniqueId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is greather than the second ObjectId.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.GenerateNewId">
            <summary>
            Generates a new ObjectId with a unique value.
            </summary>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.GenerateNewId(System.DateTime)">
            <summary>
            Generates a new ObjectId with a unique value (with the timestamp component based on a given DateTime).
            </summary>
            <param name="timestamp">The timestamp component (expressed as a DateTime).</param>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.GenerateNewId(System.Int32)">
            <summary>
            Generates a new ObjectId with a unique value (with the given timestamp).
            </summary>
            <param name="timestamp">The timestamp component.</param>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.GenerateNewStringId">
            <summary>
            Generates a new ObjectId string with a unique value.
            </summary>
            <returns>The string value of the new generated ObjectId.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.GetCurrentProcessId">
            <summary>
            Gets the current process id.  This method exists because of how CAS operates on the call stack, checking
            for permissions before executing the method.  Hence, if we inlined this call, the calling method would not execute
            before throwing an exception requiring the try/catch at an even higher level that we don't necessarily control.
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.CompareTo(ThinkLib.Utilities.UniqueId)">
            <summary>
            Compares this ObjectId to another ObjectId.
            </summary>
            <param name="other">The other ObjectId.</param>
            <returns>A 32-bit signed integer that indicates whether this ObjectId is less than, equal to, or greather than the other.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.Equals(ThinkLib.Utilities.UniqueId)">
            <summary>
            Compares this ObjectId to another ObjectId.
            </summary>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are equal.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.Equals(System.Object)">
            <summary>
            Compares this ObjectId to another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the other object is an ObjectId and equal to this one.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.ToByteArray">
            <summary>
            Converts the ObjectId to a byte array.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.ToString">
            <summary>
            Returns a string representation of the value.
            </summary>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:ThinkLib.Utilities.UniqueId.Parse(System.String)">
            <summary>
            Parses a string and creates a new ObjectId.
            </summary>
            <param name="s">The string value.</param>
            <returns>A ObjectId.</returns>
        </member>
        <member name="T:ThinkLib.Utilities.CryptoUtils">
            <summary>
            加解密工具类
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtils.EncryptByBase64(System.String,System.String)">
            <summary>
            将字符串编码为Base64字符串
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtils.EncryptByBase64(System.String,System.Text.Encoding)">
            <summary>
            将字符串编码为Base64字符串
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtils.DecryptByBase64(System.String,System.String)">
            <summary>
            将Base64字符串解码为普通字符串
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtils.DecryptByBase64(System.String,System.Text.Encoding)">
            <summary>
            将Base64字符串解码为普通字符串
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtils.EncryptByAES(System.String,System.String,System.String)">
            <summary>
            AES加密字符串
            </summary>
            <param name="source">待加密的字符串</param>
            <param name="key">加密密钥</param>
            <param name="charset">字符集</param>
            <returns>加密成功返回加密后的字符串,失败返加空字符串</returns>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtils.DecryptByAES(System.String,System.String,System.String)">
            <summary>
            AES解密字符串
            </summary>
            <param name="source">待解密的字符串</param>
            <param name="key">解密密钥,和加密密钥相同</param>
            <param name="charset">字符集</param>
            <returns>解密成功返回解密后的字符串,失败返加空字符串</returns>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtils.MD5(System.String,System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="source">原始字符串</param>
            <param name="charset">字符集</param>
            <returns>MD5结果</returns>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtils.EncryptByRSA(System.String,System.String,System.String)">
            <summary>
            RSA加密字符串
            </summary>
            <param name="content">待加密的字符串</param>
            <param name="privateKey">加密密钥</param>
            <param name="charset">字符集</param>
            <returns>解密成功返回解密后的字符串,失败返加空字符串</returns>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtils.VerifyByRSA(System.String,System.String,System.String,System.String)">
            <summary>
            验证签名
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.CryptoUtils.DecryptByRSA(System.String,System.String,System.String)">
            <summary>
            RSA加密字符串
            </summary>
            <param name="content">加密的字符串</param>
            <param name="privateKey">加密密钥</param>
            <param name="charset">字符集</param>
            <returns>加密成功返回加密后的字符串,失败返加空字符串</returns>
        </member>
        <member name="T:ThinkLib.Utilities.FileUtils">
            <summary>
            对文件相关操作的工具类
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.DirectoryExists(System.String)">
            <summary>
            判断目录是否存在
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.FileExists(System.String)">
            <summary>
            判断文件是否存在
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.FileMove(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="sourceFileName">移动文件</param>
            <param name="destFileName">目标文件</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.FileCopy(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="sourceFileName">复制文件</param>
            <param name="destFileName">目标文件</param>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.FileDelete(System.String)">
            <summary>
            删除文件
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.FileSize(System.String)">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.FileUtils.GetMapPath(System.String)">
            <summary>
            获得当前绝对路径
            </summary>
            <param name="strPath">指定的路径</param>
            <returns>绝对路径</returns>
        </member>
        <member name="T:ThinkLib.Utilities.HttpUtils">
            <summary>
            http工具类
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.HttpUtils.GetLocalIPV4">
            <summary>
            获取本机IPV4
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.HttpUtils.InIPArray(System.String,System.String[])">
            <summary>
            返回指定IP是否在指定的IP数组所限定的范围内, IP数组内的IP地址可以使用*表示该IP段任意, 例如192.168.1.*
            </summary>
            <param name="ip">指定的IP地址</param>
            <param name="iparray">IP地址范围</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:ThinkLib.Utilities.HttpUtils.GetClientIPV4">
            <summary>
            获取客户端ip
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.HttpUtils.BuildRequestWithPost(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            建立请求，以模拟远程HTTP的POST请求方式构造并获取处理结果
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.HttpUtils.BuildRequestWithGet(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            建立请求，以模拟远程HTTP的GET请求方式构造并获取处理结果
            </summary>
        </member>
        <member name="T:ThinkLib.Utilities.LockUtil">
            <summary>
            A class provide the functionality to lock object by value object.
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.LockUtil.Lock(System.Object,System.Action)">
            <summary>Lock an action by a given key value object.
            </summary>
        </member>
        <member name="T:ThinkLib.Utilities.RandomUtils">
            <summary>
            生成随机数工具类
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.RandomUtils.GenerateCode(System.Int32)">
            <summary>
            随机字符串
            </summary>
        </member>
        <member name="M:ThinkLib.Utilities.RandomUtils.GenerateNum(System.Int32)">
            <summary>
            随机数字
            </summary>
        </member>
        <member name="T:ThinkLib.Caching.CacheConfiguration">
            <summary>
            缓存配置
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.CacheConfiguration.#ctor(System.String,System.String,System.String)">
            <summary>
            build a configuration
            </summary>
        </member>
        <member name="P:ThinkLib.Caching.CacheConfiguration.Region">
            <summary>
            区域
            </summary>
        </member>
        <member name="P:ThinkLib.Caching.CacheConfiguration.Properties">
            <summary>
            配置属性
            </summary>
        </member>
        <member name="T:ThinkLib.Caching.CacheConfigurationSectionHandler">
            <summary>
            配置节点的访问
            </summary>
        </member>
        <member name="F:ThinkLib.Caching.CacheConfigurationSectionHandler.SectionName">
            <summary>
            配置节点名称
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.CacheConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            parse the config section
            </summary>
            <returns>an array of CacheConfig objects</returns>
        </member>
        <member name="T:ThinkLib.Caching.HashtableCacheProvider">
            <summary>
            .Net Hashtable
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.HashtableCacheProvider.BuildCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建区域缓存
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.HashtableCacheProvider.BuildCache(System.String)">
            <summary>
            创建区域缓存
            </summary>
        </member>
        <member name="T:ThinkLib.Caching.ICache">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.ICache.Get(System.String)">
            <summary>
            从缓存获取对象实例。
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.ICache.Put(System.String,System.Object)">
            <summary>
            放此对象实例放入缓存。
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.ICache.Remove(System.String)">
            <summary>
            从缓存移除该键值对应的对象实例。
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.ICache.Clear">
            <summary>
            清空缓存。
            </summary>
        </member>
        <member name="P:ThinkLib.Caching.ICache.RegionName">
            <summary>
            获取此缓存的区域名称。
            </summary>
        </member>
        <member name="T:ThinkLib.Caching.ICacheProvider">
            <summary>
            缓存提供
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.ICacheProvider.BuildCache(System.String)">
            <summary>
            建造缓存区。
            </summary>
            <param name="regionName">缓存区域的名称</param>
        </member>
        <member name="M:ThinkLib.Caching.ICacheProvider.BuildCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            建造缓存区。
            </summary>
            <param name="regionName">缓存区域的名称</param>
            <param name="properties">配置项</param>
        </member>
        <member name="T:ThinkLib.Caching.MemoryCacheProvider">
            <summary>
            .Net MemoryCache
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.MemoryCacheProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.MemoryCacheProvider.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.MemoryCacheProvider.BuildCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建区域缓存
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.MemoryCacheProvider.BuildCache(System.String)">
            <summary>
            创建区域缓存
            </summary>
        </member>
        <member name="T:ThinkLib.Caching.WebCacheProvider">
            <summary>
            .Net WebCache
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.WebCacheProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.WebCacheProvider.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.WebCacheProvider.BuildCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建区域缓存
            </summary>
        </member>
        <member name="M:ThinkLib.Caching.WebCacheProvider.BuildCache(System.String)">
            <summary>
            创建区域缓存
            </summary>
        </member>
        <member name="T:ThinkLib.Interception.GetNextInterceptorDelegate">
            <summary>
            获取下一个拦截器的委托
            </summary>
        </member>
        <member name="T:ThinkLib.Interception.IInterceptor">
            <summary>
            表现一个拦截器的接口
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.IInterceptor.Invoke(ThinkLib.Interception.IMethodInvocation,ThinkLib.Interception.GetNextInterceptorDelegate)">
            <summary>
            调用结果
            </summary>
        </member>
        <member name="T:ThinkLib.Interception.IInterceptorProvider">
            <summary>
            表示一个获取拦截器的接口
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.IInterceptorProvider.GetInterceptors(System.Reflection.MethodInfo)">
            <summary>
            获取 <paramref name="method"/> 上的拦截器
            </summary>
        </member>
        <member name="T:ThinkLib.Interception.IMethodInvocation">
            <summary>
            
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.IMethodInvocation.Arguments">
            <summary>
            获取所有的参数集合
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.IMethodInvocation.Inputs">
            <summary>
            获取输入的参数集合
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.IMethodInvocation.InvocationContext">
            <summary>
            当前上下文数据
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.IMethodInvocation.MethodBase">
            <summary>
            调用方法的信息
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.IMethodInvocation.Target">
            <summary>
            调用方法所在的实例
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.IMethodInvocation.CreateExceptionMethodReturn(System.Exception)">
            <summary>
            创建一个带有异常信息的结果
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.IMethodInvocation.CreateMethodReturn(System.Object,System.Object[])">
            <summary>
            创建一个正确返回的结果
            </summary>
        </member>
        <member name="T:ThinkLib.Interception.IMethodReturn">
            <summary>
            表示这是一个方法返回的接口
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.IMethodReturn.Exception">
            <summary>
            获取异常信息
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.IMethodReturn.InvocationContext">
            <summary>
            获取当前上下文的数据
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.IMethodReturn.Outputs">
            <summary>
            输出参数集合
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.IMethodReturn.ReturnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="T:ThinkLib.Interception.InterceptorProvider">
            <summary>
            <see cref="T:ThinkLib.Interception.IInterceptorProvider"/> 的实现类
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.InterceptorProvider.GetInterceptors(System.Reflection.MethodInfo)">
            <summary>
            获取该方法上的拦截器
            </summary>
        </member>
        <member name="T:ThinkLib.Interception.InvokeInterceptorDelegate">
            <summary>
            表示调用拦截器的委托
            </summary>
        </member>
        <member name="T:ThinkLib.Interception.IParameterCollection">
            <summary>
            表示参数集合。
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.IParameterCollection.Item(System.String)">
            <summary>
            通过参数名称获取该参数的值
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.IParameterCollection.ContainsParameter(System.String)">
            <summary>
            检查是否包含该参数名称。
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.IParameterCollection.GetParameterInfo(System.Int32)">
            <summary>
            通过参数索引获取参数信息
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.IParameterCollection.GetParameterInfo(System.String)">
            <summary>
            通过参数名称获取参数信息
            </summary>
        </member>
        <member name="T:ThinkLib.Interception.MethodInvocation">
            <summary>
            <see cref="T:ThinkLib.Interception.IMethodInvocation"/> 的实现类
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.MethodInvocation.#ctor(System.Object,System.Reflection.MethodBase,System.Object[])">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.MethodInvocation.Arguments">
            <summary>
            方法上所有的参数列表
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.MethodInvocation.Inputs">
            <summary>
            方法上输入参数的列表
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.MethodInvocation.InvocationContext">
            <summary>
            当前上下文数据
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.MethodInvocation.MethodBase">
            <summary>
            调用方法的信息
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.MethodInvocation.Target">
            <summary>
            调用方法所在的实例
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.MethodInvocation.CreateExceptionMethodReturn(System.Exception)">
            <summary>
            创建一个带有异常信息的结果
            </summary>ram>
        </member>
        <member name="M:ThinkLib.Interception.MethodInvocation.CreateMethodReturn(System.Object,System.Object[])">
            <summary>
            创建一个正确返回的结果
            </summary>
        </member>
        <member name="T:ThinkLib.Interception.MethodReturn">
            <summary>
            <see cref="T:ThinkLib.Interception.IMethodReturn"/> 的实现类
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.MethodReturn.#ctor(ThinkLib.Interception.IMethodInvocation,System.Object,System.Object[])">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.MethodReturn.#ctor(ThinkLib.Interception.IMethodInvocation,System.Exception)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.MethodReturn.Exception">
            <summary>
            获取异常信息
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.MethodReturn.InvocationContext">
            <summary>
            获取当前上下文的数据
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.MethodReturn.Outputs">
            <summary>
            获取返回参数列表
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.MethodReturn.ReturnValue">
            <summary>
            获取方法的返回结果
            </summary>
        </member>
        <member name="T:ThinkLib.Interception.Pipeline.InterceptorPipeline">
            <summary>
            拦截器的管道
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.Pipeline.InterceptorPipeline.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.Pipeline.InterceptorPipeline.#ctor(System.Collections.Generic.IEnumerable{ThinkLib.Interception.IInterceptor})">
            <summary>
             Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.Pipeline.InterceptorPipeline.Count">
            <summary>
            拦截器数据
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.Pipeline.InterceptorPipeline.Invoke(ThinkLib.Interception.IMethodInvocation,ThinkLib.Interception.InvokeInterceptorDelegate)">
            <summary>
            调用结果
            </summary>
        </member>
        <member name="T:ThinkLib.Interception.Pipeline.InterceptorPipelineKey">
            <summary>
            拦截器管理的标识
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.Pipeline.InterceptorPipelineKey.Equals(System.Object)">
            <summary>
            比较该实例是否与当前实例相同
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.Pipeline.InterceptorPipelineKey.GetHashCode">
            <summary>
            获取此实例的哈希代码
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.Pipeline.InterceptorPipelineKey.op_Equality(ThinkLib.Interception.Pipeline.InterceptorPipelineKey,ThinkLib.Interception.Pipeline.InterceptorPipelineKey)">
            <summary>
            比较两个实例相等
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.Pipeline.InterceptorPipelineKey.op_Inequality(ThinkLib.Interception.Pipeline.InterceptorPipelineKey,ThinkLib.Interception.Pipeline.InterceptorPipelineKey)">
            <summary>
            比较两个实例不相等
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.Pipeline.InterceptorPipelineKey.ForMethod(System.Reflection.MethodBase)">
            <summary>
            获取该方法的标识
            </summary>
        </member>
        <member name="T:ThinkLib.Interception.Pipeline.InterceptorPipelineManager">
            <summary>
            拦截器管理的管理器
            </summary>
        </member>
        <member name="F:ThinkLib.Interception.Pipeline.InterceptorPipelineManager.Instance">
            <summary>
            一个 <see cref="T:ThinkLib.Interception.Pipeline.InterceptorPipelineManager"/> 的实例
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.Pipeline.InterceptorPipelineManager.GetPipeline(System.Reflection.MethodBase)">
            <summary>
            获取当前方法的拦截器管道
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.Pipeline.InterceptorPipelineManager.SetPipeline(System.Reflection.MethodBase,ThinkLib.Interception.Pipeline.InterceptorPipeline)">
            <summary>
            设置当前方法的拦截器管道
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.Pipeline.InterceptorPipelineManager.CreatePipeline(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{ThinkLib.Interception.IInterceptor})">
            <summary>
            创建并返回当前方法的拦截器管道
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.Pipeline.InterceptorPipelineManager.CreatePipeline(System.Reflection.MethodInfo,System.Func{System.Collections.Generic.IEnumerable{ThinkLib.Interception.IInterceptor}})">
            <summary>
            创建并返回当前方法的拦截器管道
            </summary>
        </member>
        <member name="T:ThinkLib.Interception.ParameterCollection">
            <summary>
            <see cref="T:ThinkLib.Interception.IParameterCollection"/> 的实现类
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.ParameterCollection.#ctor(System.Object[],System.Reflection.ParameterInfo[],System.Predicate{System.Reflection.ParameterInfo})">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.ParameterCollection.Item(System.String)">
            <summary>
            通过参数名称获取该参数的值
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.ParameterCollection.ContainsParameter(System.String)">
            <summary>
            检查是否包含该参数名称。
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.ParameterCollection.GetParameterInfo(System.Int32)">
            <summary>
            通过参数位置获取参数信息
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.ParameterCollection.GetParameterInfo(System.String)">
            <summary>
            通过参数名称获取参数信息
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.ParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的索引处开始，将当前的元素复制到一个 <see cref="T:System.Array"/> 中
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.ParameterCollection.Count">
            <summary>
            获取包含的元素数。
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.ParameterCollection.IsSynchronized">
            <summary>
            非线程安全的集合
            </summary>
        </member>
        <member name="P:ThinkLib.Interception.ParameterCollection.SyncRoot">
            <summary>
            获取可用于同步访问的对象。
            </summary>
        </member>
        <member name="M:ThinkLib.Interception.ParameterCollection.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
        </member>
        <member name="T:ThinkLib.Serialization.DefaultBinarySerializer">
            <summary>
            <see cref="T:ThinkLib.Serialization.IBinarySerializer"/> 的默认实现
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultBinarySerializer.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultBinarySerializer.Serialize(System.IO.Stream,System.Object,System.Boolean)">
            <summary>
            序列化一个对象到 <see cref="T:System.IO.Stream"/>。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultBinarySerializer.Deserialize(System.IO.Stream)">
            <summary>
            反序列化一个对象从一个 <see cref="T:System.IO.Stream"/>。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultBinarySerializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            反序列化一个对象从一个 <see cref="T:System.IO.Stream"/>。
            </summary>
        </member>
        <member name="T:ThinkLib.Serialization.DefaultTextSerializer">
            <summary>
            <see cref="T:ThinkLib.Serialization.ITextSerializer"/> 的默认实现。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultTextSerializer.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultTextSerializer.Serialize(System.Object,System.Boolean)">
            <summary>
            序列化一个对象
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultTextSerializer.Deserialize(System.String)">
            <summary>
            从 <param name="serialized" /> 反序列化一个对象。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.DefaultTextSerializer.Deserialize(System.String,System.Type)">
            <summary>
            根据 <param name="type" /> 从 <param name="serialized" /> 反序列化一个对象。
            </summary>
        </member>
        <member name="T:ThinkLib.Serialization.IBinarySerializer">
            <summary>
            表示一个序列化器。用来序列化对象的字节数组
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.IBinarySerializer.Serialize(System.IO.Stream,System.Object,System.Boolean)">
            <summary>
            序列化一个对象到 <see cref="T:System.IO.Stream"/>。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.IBinarySerializer.Deserialize(System.IO.Stream)">
            <summary>
            反序列化一个对象从一个 <see cref="T:System.IO.Stream"/>。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.IBinarySerializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            反序列化一个对象从一个 <see cref="T:System.IO.Stream"/>。
            </summary>
        </member>
        <member name="T:ThinkLib.Serialization.ITextSerializer">
            <summary>
            表示一个序列化器。用来序列化对象的字符串形式
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.ITextSerializer.Serialize(System.Object,System.Boolean)">
            <summary>
            序列化一个对象
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.ITextSerializer.Deserialize(System.String)">
            <summary>
            从 <param name="serialized" /> 反序列化一个对象。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.ITextSerializer.Deserialize(System.String,System.Type)">
            <summary>
            根据 <param name="type" /> 从 <param name="serialized" /> 反序列化一个对象。
            </summary>
        </member>
        <member name="T:ThinkLib.Serialization.SerializerExtensions">
            <summary>
            序列化器的扩展。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.SerializerExtensions.Deserialize(ThinkLib.Serialization.IBinarySerializer,System.Byte[],System.Type)">
            <summary>
            从字节数组反序列化一个对象。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.SerializerExtensions.Deserialize(ThinkLib.Serialization.IBinarySerializer,System.Byte[])">
            <summary>
            从字节数组反序列化一个对象。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.SerializerExtensions.Deserialize``1(ThinkLib.Serialization.IBinarySerializer,System.Byte[],System.Boolean)">
            <summary>
            从字节数组反序列化一个对象。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.SerializerExtensions.Serialize(ThinkLib.Serialization.IBinarySerializer,System.Object,System.Boolean)">
            <summary>
            序列化一个对象到字节数组。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.SerializerExtensions.DeserializeFromBinary(ThinkLib.Serialization.ITextSerializer,System.Byte[])">
            <summary>
            从字节数组反序列化一个对象。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.SerializerExtensions.DeserializeFromBinary(ThinkLib.Serialization.ITextSerializer,System.Byte[],System.Type)">
            <summary>
            从字节数组反序列化一个对象。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.SerializerExtensions.DeserializeFromBinary``1(ThinkLib.Serialization.ITextSerializer,System.Byte[])">
            <summary>
            从字节数组反序列化一个对象。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.SerializerExtensions.SerializeToBinary(ThinkLib.Serialization.ITextSerializer,System.Object,System.Boolean)">
            <summary>
            序列化一个对象到字节数组。
            </summary>
        </member>
        <member name="M:ThinkLib.Serialization.SerializerExtensions.Deserialize``1(ThinkLib.Serialization.ITextSerializer,System.String)">
            <summary>
            从字符串反序列化一个对象。
            </summary>
        </member>
        <member name="T:ThinkLib.ConcurrentDictionaryExtensions">
            <summary>
            ConcurrentDictionary的扩展
            </summary>
        </member>
        <member name="M:ThinkLib.ConcurrentDictionaryExtensions.Remove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            删除存在key的元素
            </summary>
        </member>
        <member name="M:ThinkLib.ConcurrentDictionaryExtensions.RemoveAndGet``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            删除存在key的元素
            </summary>
        </member>
        <member name="M:ThinkLib.ConcurrentDictionaryExtensions.TryRemove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            删除存在key的元素
            </summary>
        </member>
        <member name="M:ThinkLib.ConcurrentDictionaryExtensions.GetOrDefault``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            获取key的元素
            </summary>
        </member>
        <member name="M:ThinkLib.ConcurrentDictionaryExtensions.GetOrDefault``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,``1)">
            <summary>
            获取key的元素
            </summary>
        </member>
        <member name="M:ThinkLib.ConcurrentDictionaryExtensions.GetOrDefault``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            获取key的元素
            </summary>
        </member>
        <member name="M:ThinkLib.ConcurrentDictionaryExtensions.GetOrAdd``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            如果指定的键尚不存在，则将键/值对添加到字典中。
            </summary>
        </member>
        <member name="T:ThinkLib.ConcurrentQueueExtensions">
            <summary>
            ConcurrentQueue 的扩展类
            </summary>
        </member>
        <member name="M:ThinkLib.ConcurrentQueueExtensions.Dequeue``1(System.Collections.Concurrent.ConcurrentQueue{``0})">
            <summary>
            移除并返回位于队列开始处的元素。
            </summary>
            <returns>如果成功移除返回队列开始处的元素，否则返回该泛型的默认值。</returns>
        </member>
        <member name="T:ThinkLib.DataReaderExtentions">
            <summary>
            对 <see cref="T:System.Data.IDataReader"/> 的扩展
            </summary>
        </member>
        <member name="M:ThinkLib.DataReaderExtentions.ToDictionary(System.Data.IDataReader)">
            <summary>
            转成字典数据
            </summary>
        </member>
        <member name="M:ThinkLib.DataReaderExtentions.ToDictionary(System.Data.IDataReader,System.Boolean)">
            <summary>
            转成字典数据
            </summary>
        </member>
        <member name="M:ThinkLib.DataReaderExtentions.ToCollection(System.Data.IDataReader)">
            <summary>
            转成字典数据集合
            </summary>
        </member>
        <member name="M:ThinkLib.DataReaderExtentions.ToCollection(System.Data.IDataReader,System.Boolean)">
            <summary>
            转成字典数据集合
            </summary>
        </member>
        <member name="M:ThinkLib.DataReaderExtentions.ToList``1(System.Data.IDataReader)">
            <summary>
            转成实体集合
            </summary>
        </member>
        <member name="M:ThinkLib.DataReaderExtentions.ToList``1(System.Data.IDataReader,System.Collections.IDictionary)">
            <summary>
            转成实体集合
            </summary>
        </member>
        <member name="M:ThinkLib.DataReaderExtentions.ToList``1(System.Data.IDataReader,System.Boolean)">
            <summary>
            转成实体集合
            </summary>
        </member>
        <member name="M:ThinkLib.DataReaderExtentions.ToList``1(System.Data.IDataReader,System.Boolean,System.Collections.IDictionary)">
            <summary>
            转成实体集合
            </summary>
        </member>
        <member name="T:ThinkLib.DbConnectionExtentions">
            <summary>
            <see cref="T:System.Data.IDbConnection"/> 的扩展类
            </summary>
        </member>
        <member name="M:ThinkLib.DbConnectionExtentions.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
        </member>
        <member name="M:ThinkLib.DbConnectionExtentions.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
        </member>
        <member name="M:ThinkLib.DbConnectionExtentions.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
        </member>
        <member name="M:ThinkLib.DbConnectionExtentions.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
        </member>
        <member name="M:ThinkLib.DbConnectionExtentions.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
        </member>
        <member name="M:ThinkLib.DbConnectionExtentions.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
        </member>
        <member name="M:ThinkLib.DbConnectionExtentions.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
        </member>
        <member name="M:ThinkLib.DbConnectionExtentions.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
        </member>
        <member name="M:ThinkLib.DbConnectionExtentions.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
        </member>
        <member name="M:ThinkLib.DbConnectionExtentions.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
        </member>
        <member name="M:ThinkLib.DbConnectionExtentions.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
        </member>
        <member name="M:ThinkLib.DbConnectionExtentions.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
        </member>
        <member name="T:ThinkLib.DictionaryExtentions">
            <summary>
            对 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的扩展
            </summary>
        </member>
        <member name="M:ThinkLib.DictionaryExtentions.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            如果指定的键尚不存在，则将键/值对添加到字典中。
            </summary>
        </member>
        <member name="M:ThinkLib.DictionaryExtentions.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            如果指定的键尚不存在，则将键/值对添加到字典中。
            </summary>
        </member>
        <member name="M:ThinkLib.DictionaryExtentions.TryAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            尝试将指定的键和值添加到字典中。
            </summary>
        </member>
        <member name="M:ThinkLib.DictionaryExtentions.TryRemove``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
            <summary>
            尝试从字典中移除并返回具有指定键的值。
            </summary>
        </member>
        <member name="M:ThinkLib.DictionaryExtentions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
            如果指定的键尚不存在，则将键/值对添加到 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中；如果指定的键已存在，则更新 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的键/值对。
            </summary>
        </member>
        <member name="M:ThinkLib.DictionaryExtentions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
            <summary>
            如果指定的键尚不存在，则将键/值对添加到 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中；如果指定的键已存在，则更新 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的键/值对。
            </summary>
        </member>
        <member name="M:ThinkLib.DictionaryExtentions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1},System.Func{``1,``1})">
            <summary>
            如果指定的键尚不存在，则将键/值对添加到 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中；如果指定的键已存在，则更新 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的键/值对。
            </summary>
        </member>
        <member name="M:ThinkLib.DictionaryExtentions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Func{``1,``1})">
            <summary>
            如果指定的键尚不存在，则将键/值对添加到 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中；如果指定的键已存在，则更新 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的键/值对。
            </summary>
        </member>
        <member name="T:ThinkLib.EnumerableExtentions">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/> 的扩展类
            </summary>
        </member>
        <member name="M:ThinkLib.EnumerableExtentions.NotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的集合不能是数量为零的空集合。
            </summary>
        </member>
        <member name="M:ThinkLib.EnumerableExtentions.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的集合不能是 null 或 数量为零的空集合。
            </summary>
        </member>
        <member name="M:ThinkLib.EnumerableExtentions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历结果集
            </summary>
        </member>
        <member name="M:ThinkLib.EnumerableExtentions.Safe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            如果 <param name="source" /> 为null，则创建一个空的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。
            </summary>
        </member>
        <member name="M:ThinkLib.EnumerableExtentions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            检查 <param name="source" /> 是否为空。
            </summary>
        </member>
        <member name="M:ThinkLib.EnumerableExtentions.MapTo``1(System.Collections.IDictionary)">
            <summary>
            将字典数据映射成对应的模型
            </summary>
        </member>
        <member name="M:ThinkLib.EnumerableExtentions.MapTo``1(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            将字典数据映射成对应的模型
            </summary>
        </member>
        <member name="M:ThinkLib.EnumerableExtentions.MapTo(System.Collections.IDictionary,System.Type)">
            <summary>
            将字典数据映射成对应的模型
            </summary>
        </member>
        <member name="M:ThinkLib.EnumerableExtentions.MapTo(System.Collections.IDictionary,System.Type,System.Collections.IDictionary)">
            <summary>
            将字典数据映射成对应的模型
            </summary>
        </member>
        <member name="M:ThinkLib.EnumerableExtentions.MapTo``1(System.Collections.ICollection)">
            <summary>
            将字典集合数据映射成对应的模型
            </summary>
        </member>
        <member name="M:ThinkLib.EnumerableExtentions.MapTo``1(System.Collections.ICollection,System.Collections.IDictionary)">
            <summary>
            将字典集合数据映射成对应的模型
            </summary>
        </member>
        <member name="T:ThinkLib.ParameterRebinder">
            <summary>
            Represents the parameter rebinder used for rebinding the parameters for the given expressions. For more information about this solution please refer to http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx.
            </summary>
        </member>
        <member name="T:ThinkLib.ExpressionFuncExtender">
            <summary>
            Represents the extender for Expression[Func[T, bool]] type. For more information about this solution please refer to http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx.
            </summary>
        </member>
        <member name="M:ThinkLib.ExpressionFuncExtender.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines two given expressions by using the AND semantics.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="first">The first part of the expression.</param>
            <param name="second">The second part of the expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="M:ThinkLib.ExpressionFuncExtender.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines two given expressions by using the AND semantics.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="first">The first part of the expression.</param>
            <param name="second">The second part of the expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="M:ThinkLib.ExpressionFuncExtender.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines two given expressions by using the OR semantics.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="first">The first part of the expression.</param>
            <param name="second">The second part of the expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="M:ThinkLib.ExpressionFuncExtender.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Represents the specification which indicates the semantics opposite to the given specification.
            </summary>
        </member>
        <member name="M:ThinkLib.ExpressionFuncExtender.RemoveConvert(System.Linq.Expressions.Expression)">
            <summary></summary>
        </member>
        <member name="M:ThinkLib.ExpressionFuncExtender.Parameter(System.Linq.Expressions.MemberExpression)">
            <summary></summary>
        </member>
        <member name="T:ThinkLib.HttpRequestBaseExtensions">
            <summary>
            扩展 <see cref="T:System.Web.HttpRequestBase" /> 类，该类包含客户端在 Web 请求中发送的 HTTP 值。
            </summary>
        </member>
        <member name="M:ThinkLib.HttpRequestBaseExtensions.IsPost(System.Web.HttpRequestBase)">
            <summary>
            判断当前页面是否接收到了 POST 请求
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <returns>是否接收到了POST请求。</returns>
        </member>
        <member name="M:ThinkLib.HttpRequestBaseExtensions.IsGet(System.Web.HttpRequestBase)">
            <summary>
            判断当前页面是否接收到了 GET 请求
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <returns>是否接收到了GET请求。</returns>
        </member>
        <member name="M:ThinkLib.HttpRequestBaseExtensions.GetString(System.Web.HttpRequestBase,System.String)">
            <summary>
            获取 <see cref="P:System.Web.HttpRequestBase.QueryString" />、<see cref="P:System.Web.HttpRequestBase.Form" />、<see cref="P:System.Web.HttpRequestBase.ServerVariables" /> 和 <see cref="P:System.Web.HttpRequestBase.Cookies" /> 项的集合中具有指定键的项。
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <param name="name">键值</param>
            <returns>该键值对应的值。</returns>
        </member>
        <member name="M:ThinkLib.HttpRequestBaseExtensions.GetFormString(System.Web.HttpRequestBase,System.String)">
            <summary>
            获得指定表单参数的值
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <param name="name">表单参数</param>
            <returns>表单参数的值</returns>
        </member>
        <member name="M:ThinkLib.HttpRequestBaseExtensions.GetQueryString(System.Web.HttpRequestBase,System.String)">
            <summary>
            获得指定Url参数的值
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <param name="name">Url参数</param>
            <returns>Url参数的值</returns>
        </member>
        <member name="M:ThinkLib.HttpRequestBaseExtensions.GetIP(System.Web.HttpRequestBase)">
            <summary>
            获得当前页面客户端的IP
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <returns>当前页面客户端的IP</returns>
        </member>
        <member name="T:ThinkLib.ObjectExtentions">
            <summary>
            对 基础类型 的扩展
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.HtmlEncode(System.String)">
            <summary>
            返回 HTML 字符串的编码结果
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.HtmlDecode(System.String)">
            <summary>
            返回 HTML 字符串的解码结果
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.UrlEncode(System.String,System.String)">
            <summary>
            返回 URL 字符串的编码结果
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            返回 URL 字符串的编码结果
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.UrlDecode(System.String,System.String)">
            <summary>
            返回 URL 字符串的解码结果
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            返回 URL 字符串的解码结果
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.IsValid``1(``0,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            验证模型的正确性
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.NotNull(System.Object,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的值不能是 null。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.NotEmpty(System.String,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的字符串不能 <see cref="F:System.String.Empty"/> 字符串。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.NotNullOrEmpty(System.String,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的字符串不能是 null 或 <see cref="F:System.String.Empty"/> 字符串。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.NotWhiteSpace(System.String,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的字符串不能是空白字符串。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的字符串不能是 null 或 空白字符串。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.MustPositive(System.Int32,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的数值必须是正整数。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.MustPositive(System.Int64,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的数值必须是正整数。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.MustPositive(System.Decimal,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的数值必须是正整数。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.NonNegative(System.Int64,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的数值不能是负数。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.NonNegative(System.Int32,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的数值不能是负数。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.NonNegative(System.Decimal,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的数值不能是负数。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.NotEmptyGuid(System.Guid,System.String)">
            <summary>
            参数名称为 <paramref name="variableName"/> 的标识符不能是均为零的标识。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.IsNull(System.Object)">
            <summary>
            检查当前对象是否为 null
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.BeforeContact(System.String,System.String)">
            <summary>
            如果当前的字符串不为空，则返回加前缀后的字符串
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.AfterContact(System.String,System.String)">
            <summary>
            如果当前的字符串不为空，则返回加后缀后的字符串
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.TrueLength(System.String,System.String)">
            <summary>
            返回字符串真实长度, 1个汉字长度为2
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.TrueLength(System.String,System.Text.Encoding)">
            <summary>
            返回字符串真实长度
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.Cut(System.String,System.Int32,System.String)">
            <summary>
            取指定长度的字符串，超过部分替代
            </summary>
            <param name="str">原字符串</param>
            <param name="len">指定长度</param>
            <param name="tail">用于替换的字符串</param>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.Split(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.InArray(System.String,System.String[],System.Boolean)">
            <summary>
            判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="str">要查找的字符串</param>
            <param name="array">字符串数组</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.InArrayIndexOf(System.String,System.String[],System.Boolean)">
            <summary>
            判断指定字符串在指定字符串数组中的位置
            </summary>
            <param name="str">要查找的字符串</param>
            <param name="array">字符串数组</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.InArray(System.String,System.String,System.String,System.Boolean)">
            <summary>
            判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="str">字符串</param>
            <param name="strarray">内部以逗号分割单词的字符串</param>
            <param name="strsplit">分割字符串</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.IsNumeric(System.String)">
            <summary>
            判定字符串是不是数值型
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.IsDate(System.String)">
            <summary>
            判断字符串是不是yyyy-mm-dd字符串
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.IsTime(System.String)">
            <summary>
            判断字符串是不是时间格式
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.IsDateTime(System.String)">
            <summary>
            判断字符串是不是日期模式
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.IsDecimal(System.String)">
            <summary>
            判断字符串是不是小数类型
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.IsEmail(System.String)">
            <summary>
            检测是否符合email格式
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.IfEmpty(System.String,System.String)">
            <summary>
            如果当前的字符串为空，则返回安全值
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.IfEmpty(System.String,System.Func{System.String})">
            <summary>
            如果当前的字符串为空，则返回安全值
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.Change(System.String,System.Type)">
            <summary>
            将 <param name="str" /> 转换为 <param name="targetType" /> 的值。转换失败会抛异常
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.ChangeIfError(System.String,System.Type,System.Object)">
            <summary>
            将 <param name="str" /> 转换为 <param name="targetType" /> 的值。如果转换失败则使用 <param name="defaultValue" /> 的值。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.TryChange(System.String,System.Type,System.Object@)">
            <summary>
            将 <param name="str" /> 转换为 <param name="targetType" /> 的值。一个指示转换是否成功的返回值 <param name="result" />。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.Change``1(System.String)">
            <summary>
            将 <param name="str" /> 转换为 <typeparam name="T" /> 的值。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.ChangeIfError``1(System.String,``0)">
            <summary>
            将 <param name="str" /> 转换为 <typeparam name="T" /> 的值。如果转换失败则使用 <param name="defaultValue" /> 的值。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.TryChange``1(System.String,``0@)">
            <summary>
            将 <param name="str" /> 转换为 <typeparam name="T" /> 的值。一个指示转换是否成功的返回值 <param name="result" />。
            </summary>
        </member>
        <member name="M:ThinkLib.ObjectExtentions.Clone``1(``0)">
            <summary>
            克隆一个 <typeparamref name="T"/> 的副本。
            </summary>
        </member>
        <member name="T:ThinkLib.ReaderWriterLockSlimExtensions">
            <summary>
            <see cref="T:System.Threading.ReaderWriterLockSlim"/> 的扩展类
            </summary>
        </member>
        <member name="M:ThinkLib.ReaderWriterLockSlimExtensions.AtomRead(System.Threading.ReaderWriterLockSlim,System.Action)">
            <summary>
            An atom read action wrapper.
            </summary>
        </member>
        <member name="M:ThinkLib.ReaderWriterLockSlimExtensions.AtomRead(System.Threading.ReaderWriterLockSlim,System.Action{System.Threading.ReaderWriterLockSlim})">
            <summary>
            An atom read action wrapper.
            </summary>
        </member>
        <member name="M:ThinkLib.ReaderWriterLockSlimExtensions.AtomRead``1(System.Threading.ReaderWriterLockSlim,System.Func{``0})">
            <summary>
            An atom read func wrapper.
            </summary>
        </member>
        <member name="M:ThinkLib.ReaderWriterLockSlimExtensions.AtomRead``1(System.Threading.ReaderWriterLockSlim,System.Func{System.Threading.ReaderWriterLockSlim,``0})">
            <summary>
            An atom read func wrapper.
            </summary>
        </member>
        <member name="M:ThinkLib.ReaderWriterLockSlimExtensions.AtomWrite(System.Threading.ReaderWriterLockSlim,System.Action)">
            <summary>
            An atom write action wrapper.
            </summary>
        </member>
        <member name="M:ThinkLib.ReaderWriterLockSlimExtensions.AtomWrite``1(System.Threading.ReaderWriterLockSlim,System.Func{``0})">
            <summary>
            An atom write func wrapper.
            </summary>
        </member>
        <member name="T:ThinkLib.ReflectionExtentions">
            <summary>
            <see cref="T:System.Reflection.MemberInfo"/> 的扩展类
            </summary>
        </member>
        <member name="M:ThinkLib.ReflectionExtentions.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Returns the type of the specified member
            </summary>
            <param name="memberInfo">member to get type from</param>
            <returns>Member type</returns>
        </member>
        <member name="M:ThinkLib.ReflectionExtentions.IsStaticMember(System.Reflection.MemberInfo)">
            <summary>
            check the member is static.
            </summary>
            <param name="memberInfo">member to get type from</param>
            <returns>Member type</returns>
        </member>
        <member name="M:ThinkLib.ReflectionExtentions.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets a field/property
            </summary>
            <param name="memberInfo">The memberInfo specifying the object</param>
            <param name="o">The object</param>
        </member>
        <member name="M:ThinkLib.ReflectionExtentions.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets a field/property
            </summary>
            <param name="memberInfo">The memberInfo specifying the object</param>
            <param name="o">The object</param>
            <param name="value">The field/property value to assign</param>
        </member>
        <member name="M:ThinkLib.ReflectionExtentions.GetExposingProperty(System.Reflection.MemberInfo)">
            <summary>
            If memberInfo is a method related to a property, returns the PropertyInfo
            </summary>
        </member>
        <member name="M:ThinkLib.ReflectionExtentions.GetFirstInnerReturnType(System.Reflection.MemberInfo)">
            <summary>
            This function returns the type that is the "return type" of the member.
            If it is a template it returns the first template parameter type.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:ThinkLib.ReflectionExtentions.GetCustomAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            返回<paramref name="provider"/>上定义的<typeparamref name="A"/>特性数组。
            </summary>
            <typeparam name="A">特性类型</typeparam>
            <param name="provider">为支持自定义属性的反映对象提供自定义属性。</param>
            <param name="inherit">当为 true 时，查找继承的自定义属性的层次结构链。</param>
        </member>
        <member name="M:ThinkLib.ReflectionExtentions.GetCustomAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            返回<paramref name="provider"/>上定义的第一个<typeparamref name="A"/>特性。
            </summary>
            <typeparam name="A">特性类型</typeparam>
            <param name="provider">为支持自定义属性的反映对象提供自定义属性。</param>
            <param name="inherit">当为 true 时，查找继承的自定义属性的层次结构链。</param>
        </member>
        <member name="M:ThinkLib.ReflectionExtentions.IsDefined``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            判断<paramref name="provider"/>上是否定义<typeparamref name="TAttribute"/>特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="provider">为支持自定义属性的反映对象提供自定义属性。</param>
            <param name="inherit">当为 true 时，查找继承的自定义属性的层次结构链。</param>
        </member>
        <member name="T:ThinkLib.TypeExtensions">
            <summary>
            <see cref="T:System.Type"/> 的扩展类
            </summary>
        </member>
        <member name="M:ThinkLib.TypeExtensions.CanBeNull(System.Type)">
            <summary>
            Determines if a given type can have a null value
            </summary>
        </member>
        <member name="M:ThinkLib.TypeExtensions.GetSingleMember(System.Type,System.String)">
            <summary>
            Returns a unique MemberInfo
            </summary>
            <param name="t">The declaring type</param>
            <param name="name">The member name</param>
            <returns>A MemberInfo or null</returns>
        </member>
        <member name="M:ThinkLib.TypeExtensions.GetSingleMember(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Returns a unique MemberInfo
            </summary>
            <param name="t">The declaring type</param>
            <param name="name">The member name</param>
            <param name="bindingFlags">Binding flags</param>
            <returns>A MemberInfo or null</returns>
        </member>
        <member name="M:ThinkLib.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines if a Type is specified as nullable
            </summary>
        </member>
        <member name="M:ThinkLib.TypeExtensions.GetNullableType(System.Type)">
            <summary>
            If the type is nullable, returns the underlying type
            Undefined behavior otherwise (it's user responsibility to check for Nullable first)
            </summary>
        </member>
        <member name="M:ThinkLib.TypeExtensions.GetDefaultValue(System.Type)">
            <summary>
            获取该类型的默认值
            </summary>
        </member>
        <member name="M:ThinkLib.TypeExtensions.GetAssemblyName(System.Type)">
            <summary>
            获取该类型的程序集名称
            </summary>
        </member>
        <member name="M:ThinkLib.TypeExtensions.GetFullName(System.Type)">
            <summary>
            获取该类型的完整名称且包括程序集名称
            </summary>
        </member>
        <member name="M:ThinkLib.TypeExtensions.GetShortName(System.Type)">
            <summary>
            Returns type name without generic specification
            </summary>
        </member>
        <member name="T:ThinkLib.LogManager">
            <summary>
            表示这是一个日志管理器
            </summary>
        </member>
        <member name="T:ThinkLib.LogManager.ILogger">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="P:ThinkLib.LogManager.ILogger.IsDebugEnabled">
            <summary>
            是否启用Debug日志
            </summary>
        </member>
        <member name="P:ThinkLib.LogManager.ILogger.IsInfoEnabled">
            <summary>
            是否启用Info日志
            </summary>
        </member>
        <member name="P:ThinkLib.LogManager.ILogger.IsWarnEnabled">
            <summary>
            是否启用Warn日志
            </summary>
        </member>
        <member name="P:ThinkLib.LogManager.ILogger.IsErrorEnabled">
            <summary>
            是否启用Error日志
            </summary>
        </member>
        <member name="P:ThinkLib.LogManager.ILogger.IsFatalEnabled">
            <summary>
            是否启用Fatal日志
            </summary>
        </member>
        <member name="M:ThinkLib.LogManager.ILogger.Debug(System.Object,System.Exception)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.LogManager.ILogger.DebugFormat(System.String,System.Object[])">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.LogManager.ILogger.Info(System.Object,System.Exception)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.LogManager.ILogger.InfoFormat(System.String,System.Object[])">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.LogManager.ILogger.Warn(System.Object,System.Exception)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.LogManager.ILogger.WarnFormat(System.String,System.Object[])">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.LogManager.ILogger.Error(System.Object,System.Exception)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.LogManager.ILogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.LogManager.ILogger.Fatal(System.Object,System.Exception)">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="M:ThinkLib.LogManager.ILogger.FatalFormat(System.String,System.Object[])">
            <summary>
            写日志。
            </summary>
        </member>
        <member name="P:ThinkLib.LogManager.Default">
            <summary>
            表示这是一个默认的日志程序。
            </summary>
        </member>
        <member name="M:ThinkLib.LogManager.GetLogger(System.String)">
            <summary>
            通过名称获取一个日志
            </summary>
        </member>
        <member name="M:ThinkLib.LogManager.GetLogger(System.Type)">
            <summary>
            通过类型获取一个日志
            </summary>
        </member>
        <member name="M:ThinkLib.LogManager.SetLoggerFactory(System.Func{System.String,System.Type,ThinkLib.LogManager.ILogger})">
            <summary>
            设置日志工厂
            </summary>
        </member>
        <member name="T:ThinkLib.LogExtensions">
            <summary>
            <see cref="T:ThinkLib.LogManager.ILogger"/>的扩展方法类
            </summary>
        </member>
        <member name="M:ThinkLib.LogExtensions.Debug(ThinkLib.LogManager.ILogger,System.Exception)">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.LogExtensions.Debug(ThinkLib.LogManager.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.LogExtensions.Info(ThinkLib.LogManager.ILogger,System.Exception)">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.LogExtensions.Info(ThinkLib.LogManager.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.LogExtensions.Warn(ThinkLib.LogManager.ILogger,System.Exception)">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.LogExtensions.Warn(ThinkLib.LogManager.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.LogExtensions.Error(ThinkLib.LogManager.ILogger,System.Exception)">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.LogExtensions.Error(ThinkLib.LogManager.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.LogExtensions.Fatal(ThinkLib.LogManager.ILogger,System.Exception)">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:ThinkLib.LogExtensions.Fatal(ThinkLib.LogManager.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            写日志
            </summary>
        </member>
    </members>
</doc>
